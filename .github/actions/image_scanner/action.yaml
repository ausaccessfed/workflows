name: 'Image scan'
description: ''
inputs:
  BRANCH_NAME:
    description: 'branch to checkout'
    required: true
  GITHUB_TOKEN:
    description: 'github token used to auth to ghcr'
    required: true
  GITHUB_ACTOR:
    description: 'github actor used to auth to ghcr'
    required: true
  SCAN_NAME:
    description: 'Which scan to run'
    required: true
  IMAGE_TAG_FOR_SCAN:
    description: 'Tag to run scans on'
    default: ''
  SNYK_TOKEN:
    description: 'Only needed when running snyk'
    default: ''
  SUPPRESS_FAILURE:
    description: 'Set to true to suppress any failures'
    default: 'false'
runs:
  using: 'composite'
  steps:
    - uses: ausaccessfed/workflows/.github/actions/init@main
      with:
        BRANCH_NAME: ${{ inputs.BRANCH_NAME }}
        GITHUB_TOKEN: ${{ inputs.GITHUB_TOKEN }}
        GITHUB_ACTOR: ${{ inputs.GITHUB_ACTOR }}

    - name: pull the image
      shell: bash
      if: inputs.IMAGE_TAG_FOR_SCAN != ''
      run: docker pull ${{ inputs.IMAGE_TAG_FOR_SCAN }}

    - name: args
      id: args
      shell: bash
      run: |
        IMAGE_SCANNER_EXTRAS=""

        if [ -f "${PWD}/Dockerfile" ]; then
          IMAGE_SCANNER_EXTRAS="-v ${PWD}/Dockerfile:/app/Dockerfile ${IMAGE_SCANNER_EXTRAS}"
        fi

        if [ -f "${PWD}/.dockleignore" ]; then
          IMAGE_SCANNER_EXTRAS="-v ${PWD}/.dockleignore:/app/.dockleignore ${IMAGE_SCANNER_EXTRAS}"
        fi

        if [ -f "${PWD}/.hadolint.yaml" ]; then
          IMAGE_SCANNER_EXTRAS="-v ${PWD}/.hadolint.yaml:/app/.hadolint.yaml ${IMAGE_SCANNER_EXTRAS}"
        fi

        if [ -f "${PWD}/.trivy.yaml" ]; then
          IMAGE_SCANNER_EXTRAS="-v ${PWD}/.trivy.yaml:/app/.trivy.yaml ${IMAGE_SCANNER_EXTRAS}"
        fi

        if [ "${{ inputs.SCAN_NAME }}" = "trivy_repo" ] || [ "${{ inputs.SCAN_NAME }}" = "trivy_config" ]; then
          IMAGE_SCANNER_EXTRAS="-v ${PWD}/:/repo/ ${IMAGE_SCANNER_EXTRAS}"
        fi

        echo "IMAGE_SCANNER_EXTRAS=$IMAGE_SCANNER_EXTRAS" >> $GITHUB_OUTPUT

        if [ "${{ inputs.IMAGE_TAG_FOR_SCAN }}" != "" ]; then
          if [ "${{ inputs.SCAN_NAME }}" = "snyk" ]; then
            ARGS="${{ inputs.IMAGE_TAG_FOR_SCAN }} /app/Dockerfile ${{ inputs.SNYK_TOKEN }}"
          elif [ "${{ inputs.SCAN_NAME }}" = "hadolint" ]; then
            ARGS="/app/Dockerfile"
          else
            ARGS="${{ inputs.IMAGE_TAG_FOR_SCAN }}"
          fi
        else
          if [ "${{ inputs.SCAN_NAME }}" = "trivy_repo" ] || [ "${{ inputs.SCAN_NAME }}" = "trivy_config" ]; then
            ARGS="/repo"
          fi
        fi
        echo "ARGS=$ARGS" >> $GITHUB_OUTPUT

    - name: Run image scanner
      shell: bash
      continue-on-error: true
      env:
        DOCKLE_HOST: 'unix:///var/run/docker.sock'
      run: |
        docker run \
          -u 0 \
          -v /var/run/docker.sock:/var/run/docker.sock \
          ${{ steps.args.outputs.IMAGE_SCANNER_EXTRAS }} \
          ghcr.io/ausaccessfed/image-scanner:latest \
          ./scripts/${{ inputs.SCAN_NAME }} \
          ${{ steps.args.outputs.ARGS }} | tee /tmp/output.txt
        SUCCESS="$([[ "${PIPESTATUS[0]}" == "0" ]] && echo "success" || echo "failure")"
        echo "SUCCESS=$SUCCESS" >> $GITHUB_OUTPUT

    - uses: ausaccessfed/workflows/.github/actions/summarise@feature/resuable-summariser
      with:
        OUTPUT_FILE: '/tmp/output.txt'
        TITLE: ${{ inputs.SCAN_NAME }} Check ${{ (inputs.SUPPRESS_FAILURE == 'true' && steps.task.outputs.SUCCESS == 'failure' && '(Failed, but marked as skippable)') || '' }}
        SUCCESS: ${{ inputs.SUPPRESS_FAILURE == 'true' || steps.task.outputs.SUCCESS }}
