name: 'PR Housekeeping'
description: 'Will mark prs as auto approve,auto merge and auto assign given the contexts of callers'
inputs:
  GITHUB_TOKEN:
    description: 'github token used to auth'
    required: true
runs:
  using: 'composite'
  steps:
    - uses: actions/github-script@f28e40c7f34bde8b3046d885e986cb6290c5673b # v7.1.0
      with:
        github-token: ${{inputs.GITHUB_TOKEN}}
        script: |
          const {
              payload: {
                  pull_request: {
                      number: pull_number,
                      user: { login: actor, id: actor_id },
                      labels,
                      title,
                      node_id
                  },
              },
              repo: {
                  owner,
                  repo
              }
          } = context

          // Assign to author
          await github.rest.issues.addAssignees({
              owner,
              repo,
              issue_number: pull_number,
              assignees: [actor]
          });

          const titleRegex = new RegExp(/.*upgrade|updating.*/,"i")
          if (actor_id == "118229371" && actor == "aaf-terraform" && titleRegex.test(title)) {
              // Sadly the rest api does not support enableAutomerge
              const mutation = `mutation($pullRequestId:ID!, $mergeMethod:PullRequestMergeMethod) {
                  enablePullRequestAutoMerge(input: {pullRequestId: $pullRequestId, mergeMethod: $mergeMethod}) {
                      clientMutationId
                  }
              }`
              // Automerge
              await github.graphql(mutation, {
                  pullRequestId: node_id, mergeMethod: "SQUASH"
              })

              let labelNames = labels.map(x => x.name)
              if (labelNames.length == 0) {
                // We occasionally hit this case because labels aren't always present the instant the PR is created.
                // Let's try fetching them again for up to 50 seconds. We can trust the labels will eventually appear
                // because we know this is a Renovate PR, and Renovate always adds labels.
                const maxWaitTime = 50000
                let currentWaitTime = 1000
                let totalWaitTime = 0

                while (labelNames.length == 0 && totalWaitTime < maxWaitTime) {
                  await new Promise(resolve => setTimeout(resolve, currentWaitTime))
                  totalWaitTime += currentWaitTime
                  currentWaitTime *= 2 // Back-off exponentially

                  const { data: pullRequest } = await github.rest.pulls.get({
                      owner,
                      repo,
                      pull_number
                  })
                  labelNames = pullRequest.labels.map(x => x.name)
                }
              }

              const allowedLabels = ['development','test','devDependencies','testDependencies','dockerDependencies','workflowDistribution']
              if (labelNames.some(item => allowedLabels.includes(item))) {
                  // Autoapprove
                  await github.rest.pulls.createReview({
                      owner,
                      repo,
                      pull_number,
                      event: "APPROVE"
                  })
              }
          }
