name: Self-approve tidying
description: 'Will mark prs as auto approve and auto merge given the contexts of callers when a comment of /tidy is added'
inputs:
  GITHUB_TOKEN:
    description: 'The token to use for the github api'
    required: true
runs:
  using: 'composite'
  steps:
    - uses: ausaccessfed/workflows/.github/actions/branch_finder@main
      id: branch
      with:
        EVENT_NAME: ${{ github.event_name }}

    - uses: ausaccessfed/workflows/.github/actions/validate-gpg-key@main
      with:
        BRANCH_NAME: ${{ steps.branch.outputs.BRANCH_NAME }}
        CHECK_TRUSTED: true
        STATUS_CONTEXT: 'Self-approve tidying'
        GITHUB_TOKEN: ${{ inputs.GITHUB_TOKEN }}
      id: validate_issue_comment

    - name: Check no reserved files changed
      shell: bash
      run: |
        FILES_CHANGED="$(git diff --name-only $(git merge-base origin/${{steps.branch.outputs.BASE_BRANCH }} origin/${{ steps.branch.outputs.BRANCH_NAME }})..origin/${{ steps.branch.outputs.BRANCH_NAME }})"
        RESERVED_FILES=("trusted_keys", "verify_commit", "trusted_self_approvers")
        for RESERVED_FILE in "${RESERVED_FILES[@]}"; do
          if [[ "${FILES_CHANGED}" == *"${RESERVED_FILE}"* ]]; then
            echo "Reserved file ${RESERVED_FILE} has been changed"
            exit 1
          fi
        done

    - name: Approve and label
      uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd # v8.0.0
      with:
        github-token: ${{inputs.GITHUB_TOKEN}}
        script: |
          const {
              payload: {
                  issue: {
                      number: pull_number,
                  },
              },
              repo: {
                  owner,
                  repo
              }
          } = context

          await github.rest.pulls.createReview({
              event: "APPROVE",
              owner,
              repo,
              pull_number
          })

          // By definition, tidyings are purely technical quality improvements. We can apply the label automatically
          // to save the author a few clicks.
          await github.rest.issues.addLabels({
              owner,
              repo,
              issue_number: pull_number,
              labels: ["technical quality"]
          })
