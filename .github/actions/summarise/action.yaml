name: 'Summarise'
description: ''
inputs:
  OUTPUT_FILE:
    description: 'file containing output to be posted'
    default: 'output.txt'
  OUTPUT_MESSAGE:
    description: 'Will be used to generate the OUTPUT_FILE, note will override OUTPUT_FILE if provided'
    default: ''
  SLACK_WEBHOOK_URL:
    description: 'If not null, will post to slack'
    default: ''
  ENABLE_PR:
    description: 'If true, will post pr as comment (STILL TODO)'
    default: 'false'
  ENABLE_ACTION_SUMMARY:
    description: 'If true, will post to summary tab in flow'
    default: 'true'
  TITLE:
    description: 'Summary Title'
  SUCCESS:
    description: 'If the task was successful'
runs:
  using: 'composite'
  steps:
    - id: create_output
      if: inputs.OUTPUT_MESSAGE != ''
      shell: bash
      run: |
        echo "${{ inputs.OUTPUT_MESSAGE }}" > ${{ inputs.OUTPUT_FILE }}
        echo "Output file created."

    - id: split_file
      shell: bash
      run: |
        FILE_SIZE=$(stat -c%s "${{ inputs.OUTPUT_FILE }}")
        CHUNK_SIZE=$((900 * 1024)) # 700KB in bytes

        if [ $FILE_SIZE -gt $CHUNK_SIZE ]; then
          split -b $CHUNK_SIZE "${{ inputs.OUTPUT_FILE }}" chunk_
          echo "File split into chunks."
        else
          cp "${{ inputs.OUTPUT_FILE }}" chunk_aa
          echo "File is small enough, no need to split."
        fi
    - id: pr_comment
      shell: bash
      if: inputs.ENABLE_PR == 'true'
      run: |
        echo "TODO:"
    - id: slack_message
      shell: bash
      if: inputs.SLACK_WEBHOOK_URL != ''
      run: |
        JSON=<<-JSON
          {
            "attachments": [{
              "color": "#f4c030",
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "${{ inputs.TITLE }}",
                    "emoji": true
                  }
                }
        JSON

        for chunk in chunk_*; do
          PART=$(echo $chunk | sed 's/[^0-9]*//g')
          JSON=<<-JSON
            $JSON,
            {
              "title": "Part $PART",
              "text": "Expand to view",
              "fallback": "Expand to view",
              "callback_id": "expand_message",
              "actions": [
                {
                  "name": "expand",
                  "text": "Expand",
                  "type": "button",
                  "value": "expand"
                }
              ]
            },
            {
              "title": "Part $PART",
              "type": "rich_text",
              "elements": [{
                  "type": "rich_text_preformatted",
                  "elements": [{
                      "type": "text",
                      "text": "$(cat $chunk)"
                  }]
              }],
              "actions": [{
                "name": "collapse",
                "text": "Collapse",
                "type": "button",
                "value": "collapse"
              }],
              "collapsible": true,
                "collapsed": true
            }
          JSON
        done

        JSON=<<-JSON
          $JSON,
            {
              "type": "section",
              "text": {
                "type": "mrkdwn",
                "text": "Please review run at"
              },
              "accessory": {
                "type": "button",
                "text": {
                  "type": "plain_text",
                  "text": "${{ inputs.TITLE }}",
                  "emoji": true
                },
                "value": "click_me_123",
                "url": "https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}",
                "action_id": "button-action"
              }
            }
        JSON
        JSON="$JSON]}]}"

        curl -H 'Content-Type: application/json' -X POST -d "$JSON" ${{ inputs.SLACK_WEBHOOK_URL }}
    - id: summary_tab_1
      if: inputs.ENABLE_ACTION_SUMMARY == 'true'
      shell: bash
      run: |
        if [ -s "chunk_aa" ]; then
          echo '<details>' >> $GITHUB_STEP_SUMMARY
          echo "<summary>${{ inputs.TITLE }} (part 1)</summary>" >> $GITHUB_STEP_SUMMARY
          echo '  ' >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "$(cat chunk_aa)" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo '</details>' >> $GITHUB_STEP_SUMMARY
        else
          echo "Output file is empty, skipping summary."
        fi
    - id: summary_tab_2
      if: inputs.ENABLE_ACTION_SUMMARY == 'true'
      shell: bash
      run: |
        if [ -s "chunk_ab" ]; then
          echo '<details>' >> $GITHUB_STEP_SUMMARY
          echo "<summary>${{ inputs.TITLE }} (part 1)</summary>" >> $GITHUB_STEP_SUMMARY
          echo '  ' >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "$(cat chunk_ab)" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo '</details>' >> $GITHUB_STEP_SUMMARY
        fi
    - id: summary_tab_3
      if: inputs.ENABLE_ACTION_SUMMARY == 'true'
      shell: bash
      run: |
        if [ -s "chunk_ac" ]; then
          echo '<details>' >> $GITHUB_STEP_SUMMARY
          echo "<summary>${{ inputs.TITLE }} (part 1)</summary>" >> $GITHUB_STEP_SUMMARY
          echo '  ' >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "$(cat chunk_ac)" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo '</details>' >> $GITHUB_STEP_SUMMARY
        fi
    - id: verify_size
      shell: bash
      run: |
        if [ -s "chunk_ad" ]; then
          echo "We shouldn't be getting outputs this big!"
          exit 1
        fi
    - id: throw_error
      shell: bash
      if: inputs.SUCCESS == 'failure' || inputs.SUCCESS == 'false'
      run: |
        cat "${{ inputs.OUTPUT_FILE }}"
        exit 1
