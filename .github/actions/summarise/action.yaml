name: 'Summarise'
description: ''
inputs:
  OUTPUT_FILE:
    description: 'file containing output to be posted'
    default: 'output.txt'
  OUTPUT_MESSAGE:
    description: 'Will be used to generate the OUTPUT_FILE, note will override OUTPUT_FILE if provided'
    default: ''
  SLACK_WEBHOOK_URL:
    description: 'If not null, will post to slack'
    default: ''
  ENABLE_PR:
    description: 'If true, will post pr as comment (STILL TODO)'
    default: 'false'
  CREATE_COMMENT:
    description: 'If true, will create a new comment, if false will delete existing comment'
    default: 'true'
  PR_NUMBER:
    description: 'PR number to post comment to'
    default: ''
  ENABLE_ACTION_SUMMARY:
    description: 'If true, will post to summary tab in flow'
    default: 'true'
  TITLE:
    description: 'Summary Title'
  SUCCESS:
    description: 'If the task was successful'
runs:
  using: 'composite'
  steps:
    - id: create_output
      if: inputs.OUTPUT_MESSAGE != ''
      shell: bash
      run: |
        echo "${{ inputs.OUTPUT_MESSAGE }}" > ${{ inputs.OUTPUT_FILE }}
        echo "Output file created."

    - id: split_file
      shell: bash
      run: |
        if [ ! -e "${{ inputs.OUTPUT_FILE }}" ]; then
          echo "Output file not found." > ${{ inputs.OUTPUT_FILE }}
        fi
        echo "TITLE=$(echo "${{ inputs.TITLE }}" | tr '()' '  ' | tr '"' "'")" >> $GITHUB_OUTPUT
        FILE_SIZE=$(stat -c%s "${{ inputs.OUTPUT_FILE }}")
        CHUNK_SIZE=$((900 * 1024)) # 700KB in bytes

        if [ $FILE_SIZE -gt $CHUNK_SIZE ]; then
          split -b $CHUNK_SIZE "${{ inputs.OUTPUT_FILE }}" chunk_
          echo "File split into chunks."
        else
          cp "${{ inputs.OUTPUT_FILE }}" chunk_aa
          echo "File is small enough, no need to split."
        fi

    - shell: bash
      if: inputs.ENABLE_PR == 'true'
      uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
      id: update-pull-request
      with:
        github-token: ${{ github.token }}
        script: |
          const create_comment = "true" == "${{ inputs.CREATE_COMMENT }}"
          const output = fs.readFileSync("${{ inputs.output_file }}, "utf8");
          let output_cleaned = output.split(/(Terraform used the selected providers|No changes)/).slice(1).join("").split("Note:")[0]
          const task_failed =  "false" == "${{ inputs.SUCCESS }}"
          const title = "${{ inputs.title }}"
          const issue_number = "${{ inputs.pr_number }}"

          // Retrieve existing bot comments for the PR
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number,
          })
          const botComment = comments.find(comment => {
            return comment.user.type === 'Bot' && comment.body.includes(title)
          })

          const fs = require("fs");

          if (output_cleaned.length == 0 ) {
            output_cleaned = output
          }
          const MAX_GITHUB_COMMENT_LENGTH = 65536 - 100;
          output_cleaned = output_cleaned.slice(0, MAX_GITHUB_COMMENT_LENGTH)
          if (output_cleaned.length == MAX_GITHUB_COMMENT_LENGTH) {
            output_cleaned += "...\nPlease review the output in github actions logs because it's too long"
          }

          let output_title = "Show Output"
          if (task_failed == "true") {
            output_title = "Show Failed Output"
          }

          let body = `${title}
          <details><summary>${output_title}</summary>

          \`\`\`\n
          ${output_cleaned}
          \`\`\`

          </details>`

          if (botComment) {
            if (create_comment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body
              })
            } else {
             github.rest.issues.deleteComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
              })
            }
          } else if (create_comment){
            github.rest.issues.createComment({
              issue_number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
          }

    - id: slack_message
      shell: bash
      if: inputs.SLACK_WEBHOOK_URL != ''
      run: |
        ./scripts/slack_webhook.sh "${{ steps.split_file.outputs.TITLE }}" "${{ inputs.SLACK_WEBHOOK_URL }}" "${{github.repository}}" "${{github.run_id}}" "false"

    - id: summary_tab_1
      if: inputs.ENABLE_ACTION_SUMMARY == 'true'
      shell: bash
      run: |
        if [ -s "chunk_aa" ]; then
          echo '<details>' >> $GITHUB_STEP_SUMMARY
          echo "<summary>${{ steps.split_file.outputs.TITLE }} (part 1)</summary>" >> $GITHUB_STEP_SUMMARY
          echo '  ' >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "$(cat chunk_aa)" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo '</details>' >> $GITHUB_STEP_SUMMARY
        else
          echo "Output file is empty, skipping summary."
        fi
    - id: summary_tab_2
      if: inputs.ENABLE_ACTION_SUMMARY == 'true'
      shell: bash
      run: |
        if [ -s "chunk_ab" ]; then
          echo '<details>' >> $GITHUB_STEP_SUMMARY
          echo "<summary>${{ steps.split_file.outputs.TITLE }} (part 1)</summary>" >> $GITHUB_STEP_SUMMARY
          echo '  ' >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "$(cat chunk_ab)" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo '</details>' >> $GITHUB_STEP_SUMMARY
        fi
    - id: summary_tab_3
      if: inputs.ENABLE_ACTION_SUMMARY == 'true'
      shell: bash
      run: |
        if [ -s "chunk_ac" ]; then
          echo '<details>' >> $GITHUB_STEP_SUMMARY
          echo "<summary>${{ steps.split_file.outputs.TITLE }} (part 1)</summary>" >> $GITHUB_STEP_SUMMARY
          echo '  ' >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "$(cat chunk_ac)" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo '</details>' >> $GITHUB_STEP_SUMMARY
        fi
    - id: verify_size
      shell: bash
      run: |
        if [ -s "chunk_ad" ]; then
          echo "We shouldn't be getting outputs this big!"
          exit 1
        fi
    - id: throw_error
      shell: bash
      if: inputs.SUCCESS == 'failure' || inputs.SUCCESS == 'false'
      run: |
        cat "${{ inputs.OUTPUT_FILE }}"
        exit 1
