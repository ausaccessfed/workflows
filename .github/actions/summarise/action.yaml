name: 'Summarise'
description: ''
inputs:
  OUTPUT_FILES:
    description: 'combines into a single output file'
    default: ''
  OUTPUT_MESSAGE:
    description: 'Will be used to generate the OUTPUT_FILE, note will override OUTPUT_FILE if provided'
    default: ''
  SLACK_WEBHOOK_URL:
    description: 'If not null, will post to slack'
    default: ''
  ENABLE_PR:
    description: 'If true, will post pr as comment (STILL TODO)'
    default: 'false'
  CREATE_COMMENT:
    description: 'If true, will create a new comment, if false will delete existing comment'
    default: 'true'
  PR_NUMBER:
    description: 'PR number to post comment to'
    default: ''
  ENABLE_ACTION_SUMMARY:
    description: 'If true, will post to summary tab in flow'
    default: 'true'
  TITLE:
    description: 'Summary Title'
  SUCCESS:
    description: 'If the task was successful'
  USE_CODE_BLOCK:
    description: 'If true, output will be placed in a code block'
    default: 'true'
runs:
  using: 'composite'
  steps:
    - id: split_file
      shell: bash
      run: |
        echo "TITLE=$(echo "${{ inputs.TITLE }}" | tr '()' '  ' | tr '"' "'")" >> $GITHUB_OUTPUT
        CHUNK_SIZE=$((900 * 1024)) # 700KB in bytes

        echo "${{ inputs.OUTPUT_MESSAGE }}" > /tmp/output_message.txt

        index=0
        for file in $(echo "${{ inputs.OUTPUT_FILES }},/tmp/output_message.txt" | tr ',' ' '); do
          if [ -e "$file" ] && [ "$(cat "$file" | tr -d '[:space:]')" != "" ]; then
            FILE_SIZE=$(stat -c%s "$file")
            if [ $FILE_SIZE -gt $CHUNK_SIZE ]; then
              split -b $CHUNK_SIZE "$file" "chunk_${index}_"
              echo "$file split into chunks."
            else
              cp "$file" "chunk_${index}_aa"
              echo "$file is small enough, no need to split."
            fi
            index=$((index + 1))
          else
            echo "$file does not exist or is empty."
          fi
        done

        echo "FILE_COUNT=$index" >> $GITHUB_OUTPUT

    - if: inputs.ENABLE_PR == 'true' && steps.split_file.outputs.FILE_COUNT != '0'
      id: update-pull-request
      uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
      with:
        github-token: ${{ github.token }}
        script: |
          const fs = require("fs");

          const create_comment = 'true' == "${{ inputs.CREATE_COMMENT }}"
          // get all files named chunk_*
          const chunks = fs.readdirSync(".").filter(fn => fn.includes('chunk_'));
          const task_failed =  "false" == "${{ inputs.SUCCESS }}"
          const issue_number = "${{ inputs.pr_number }}"

          // Retrieve existing bot comments for the PR
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number,
          })

          const MAX_GITHUB_COMMENT_LENGTH = 65536 - 100;

          const title = `${{ inputs.title }}`
          const botComment = comments.find(comment => {
            return comment.user.type === 'Bot' && comment.body.includes(title)
          })

          let body = chunks.reduce((acc, chunk, i) => {
            let output = fs.readFileSync(chunk, "utf8");

            let output_title = "Show Output"
            if (task_failed == 'true') {
              output_title = "Show Failed Output"
            }

            const use_code_block = "${{ inputs.USE_CODE_BLOCK }}";
            let formatted_output = use_code_block ? `\`\`\`\n${output}\n\`\`\`` : ${output};

            const body = `## ${title}
            <details><summary>${output_title} (part ${i})</summary>

            ${formatted_output}

            </details>\n`

            return acc + body
          }, "")

          body = body.slice(0, MAX_GITHUB_COMMENT_LENGTH)
          // TODO: we could sub split and loop those also, will wait until i see this happen
          if (body.length == MAX_GITHUB_COMMENT_LENGTH) {
            body += "...\nPlease review the output in github actions logs because it's too long"
          }

          if (botComment) {
            if (create_comment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body
              })
            } else {
            github.rest.issues.deleteComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
              })
            }
          } else if (create_comment){
            github.rest.issues.createComment({
              issue_number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body
            })
          }

    - id: slack_message
      shell: bash
      if: inputs.SLACK_WEBHOOK_URL != '' && steps.split_file.outputs.FILE_COUNT != '0'
      run: |
        wget -O /tmp/slack_webhook.sh https://raw.githubusercontent.com/ausaccessfed/workflows/main/scripts/slack_webhook.sh
        chmod +x /tmp/slack_webhook.sh
        /tmp/slack_webhook.sh "${{ steps.split_file.outputs.TITLE }}" "${{ inputs.SLACK_WEBHOOK_URL }}" "${{github.repository}}" "${{github.run_id}}" "false"

    - id: summary_tab
      if: inputs.ENABLE_ACTION_SUMMARY == 'true' && steps.split_file.outputs.FILE_COUNT != '0'
      shell: bash
      run: |
        part=1
        for chunk in chunk_*; do
          if [ -s "$chunk" ]; then
            echo '<details>' >> $GITHUB_STEP_SUMMARY
            echo "<summary>${{ steps.split_file.outputs.TITLE }} (part $part)</summary>" >> $GITHUB_STEP_SUMMARY
            echo '  ' >> $GITHUB_STEP_SUMMARY
            if [ "${{ inputs.USE_CODE_BLOCK }}" == "true" ]; then
             echo '```' >> $GITHUB_STEP_SUMMARY
            fi
            echo "$(cat $chunk)" >> $GITHUB_STEP_SUMMARY
            if [ "${{ inputs.USE_CODE_BLOCK }}" == "true" ]; then
             echo '```' >> $GITHUB_STEP_SUMMARY
            fi
            echo '</details>' >> $GITHUB_STEP_SUMMARY
          else
            echo "Output file is empty, skipping summary."
          fi
          part=$((part + 1))
        done

    - id: throw_error
      shell: bash
      if: inputs.SUCCESS == 'failure' || inputs.SUCCESS == 'false'
      run: |
        for chunk in chunk_*; do
          cat $chunk
        done
        exit 1
