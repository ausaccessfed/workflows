name: Common Pr Maintenance
on:
  workflow_call:
    inputs:
      AUTO_MERGEABLE_LABELS:
        type: string
        default: "development,test,devDependencies,testDependencies"
      PULL_REQUEST_NUMBER:
        type: string
        required: true
      #  TODO: remove
      ACTOR:
        required: true
        type: string
    secrets:
      REPO_SCOPED_TOKEN:
        required: true
jobs:
  pr_maintenance:
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{secrets.REPO_SCOPED_TOKEN}}
    name: "Common Pr Maintenance"
    steps:
      - uses: actions/github-script@d7906e4ad0b1822421a7e6a35d5ca353c962f410 # v6.4.1
        with:
          github-token: ${{secrets.REPO_SCOPED_TOKEN}}
          script: |
            //const owner = context.repo.owner
            //const repo = context.repo.repo 
            //const pull_request = context.payload.pull_request
            //  TODO: do we have access to context.repo already? 1 less api call and input
            //const pull_number =  "${{ inputs.PULL_REQUEST_NUMBER }}"
            //const pull_request_response = await github.rest.pulls.get({
            //    owner,
            //    repo,
            //    pull_number,
            //})
            //const pull_request = pull_request_response.data
            console.log(pull_request.labels)

            const {
                payload: {
                    pull_request: {
                        number: pull_number, 
                        user: { login: actor }, 
                        labels,
                        node_id
                    },
                }
                repo: {
                    owner,
                    repo
                }
               
            } = context
            const allowedLabels = "${{inputs.AUTO_MERGEABLE_LABELS}}".split(",")

            // TODO: auto assign?
            // TODO: dont forget to change this
            if (actor != "aaf-terraform") {
                // Sadly the rest api does not support enableAutomerge
                const mutation = `mutation($pullRequestId:ID!, $mergeMethod:PullRequestMergeMethod) {
                    enablePullRequestAutoMerge(input: {pullRequestId: $pullRequestId, mergeMethod: $mergeMethod}) {
                        clientMutationId
                    }
                }`
                //await github.graphql(mutation, {
                //    pullRequestId: node_id, mergeMethod: "SQUASH"
                //})

                console.log(labels.some(item => allowedLabels.includes(item)))
                console.log(labels)
                console.log(allowedLabels)

                //If anything is common between the two list of labels auto approve
                if (labels.some(item => allowedLabels.includes(item)) ) {
                    await github.rest.pulls.createReview({
                        owner,
                        repo,
                        pull_number,
                        event: "APPROVE"
                    })
                }
            }
