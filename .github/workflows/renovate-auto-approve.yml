name: PR housekeeping
on:
  workflow_call:
    inputs:
      AUTO_MERGEABLE_LABELS:
        type: string
        default: "development,test,devDependencies,testDependencies"
    secrets:
      REPO_SCOPED_TOKEN:
        required: true
jobs:
  pr_housekeeping:
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{secrets.REPO_SCOPED_TOKEN}}
    name: "PR housekeeping"
    steps:
      - uses: actions/github-script@d7906e4ad0b1822421a7e6a35d5ca353c962f410 # v6.4.1
        with:
          github-token: ${{secrets.REPO_SCOPED_TOKEN}}
          script: |
            const {
                payload: {
                    pull_request: {
                        number: pull_number, 
                        user: { login: actor }, 
                        labels,
                        node_id
                    },
                },
                repo: {
                    owner,
                    repo
                }
            } = context
            const labelNames = labels.map(x => x.name)
            const allowedLabels = "${{inputs.AUTO_MERGEABLE_LABELS}}".split(",")

            console.log(context.payload.pull_request.user)

            // Assign to author
            await github.rest.issues.addAssignees({
                owner,
                repo,
                issue_number: pull_number,
                assignees: [actor]
            });

            // TODO: do we want a better matcher i.e PR title instead
            if (actor == "aaf-terraform") {
                // Sadly the rest api does not support enableAutomerge
                const mutation = `mutation($pullRequestId:ID!, $mergeMethod:PullRequestMergeMethod) {
                    enablePullRequestAutoMerge(input: {pullRequestId: $pullRequestId, mergeMethod: $mergeMethod}) {
                        clientMutationId
                    }
                }`
                // Automerge
                await github.graphql(mutation, {
                    pullRequestId: node_id, mergeMethod: "SQUASH"
                })

                //If anything is common between the two list of labels auto approve
                if (labelNames.some(item => allowedLabels.includes(item))) {
                    // Autoapprove
                    await github.rest.pulls.createReview({
                        owner,
                        repo,
                        pull_number,
                        event: "APPROVE"
                    })
                }
            }
