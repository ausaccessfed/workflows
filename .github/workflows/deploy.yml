name: Build Docker Image
on:
  workflow_call:
    inputs:
      ecr_repository:
        required: true
        type: string
      app:
        required: true
        type: string
      event_name:
        required: true
        type: string
      default_branch:
        required: true
        type: string
      version_command:
        required: true
        type: string
      test_command:
        required: true
        type: string
      task_1:
        default: 'echo "no command"'
        type: string
      task_2:
        default: 'echo "no command"'
        type: string
      task_3:
        default: 'echo "no command"'
        type: string
      production_environments:
        required: true
        type: string
    secrets:
      DOCKER_ECR:
        required: true
      ROLE:
        required: true
env:
  IMAGE_CACHE_DIR: /tmp/cache/docker-image
  IMAGE_CACHE_KEY: cache-image
  IMAGE_STABLE_KEY: stable-image
jobs:
  build-base:
    runs-on: ubuntu-latest
    name: Build base
    outputs:
      BRANCH_NAME: ${{ steps.env1.outputs.BRANCH_NAME }}
      ISSUE_COMMENT_HEAD_SHA: ${{ steps.env1.outputs.ISSUE_COMMENT_HEAD_SHA }}
      GITHUB_SHA: ${{ steps.env1.outputs.GITHUB_SHA }}
      IMAGE_TAG: ${{ steps.env1.outputs.IMAGE_TAG }}
      BASE_IMAGE: ${{ steps.env2.outputs.BASE_IMAGE }}
      ECR_REGISTRY: ${{ steps.env2.outputs.ECR_REGISTRY }}
      IMAGE_ID: ${{ steps.env2.outputs.IMAGE_ID }}
    steps:
      - uses: xt0rted/pull-request-comment-branch@v1
        if: github.event_name == 'issue_comment'
        id: comment-branch

      - name: Set commit status as pending
        uses: myrotvorets/set-commit-status-action@master
        if: github.event_name == 'issue_comment'
        with:
          sha: ${{ steps.comment-branch.outputs.head_sha }}
          token: ${{ secrets.GITHUB_TOKEN }}
          status: pending
          description: "testing, building and pushing image"
          context: "Dev federation deploy"

      - id: env1
        name: set envs
        run: |
          ## PR comment branch || pr branch || default branch
          if [ "${{ steps.comment-branch.outputs.head_ref }}" != "" ]; then
            branch_name="${{ steps.comment-branch.outputs.head_ref }}"
          elif [ "${{ github.head_ref }}" != "" ]; then
            branch_name="${{ github.head_ref }}"
          else
            branch_name="${{ github.ref_name }}"
          fi
          echo "BRANCH_NAME=$branch_name" >> $GITHUB_OUTPUT

          if [ "${{ github.event_name }}" == "issue_comment" ]; then
            echo "ISSUE_COMMENT_HEAD_SHA=${{ steps.comment-branch.outputs.head_sha }}" >> $GITHUB_OUTPUT
            echo "GITHUB_SHA=${{ steps.comment-branch.outputs.head_sha }}" >> $GITHUB_OUTPUT
            image_tag=adhoc-${{steps.comment-branch.outputs.head_ref}}-${{steps.comment-branch.outputs.head_sha}}
          else
            image_tag=stable-${{ github.sha }}
            echo "GITHUB_SHA=${{ github.sha }}" >> $GITHUB_OUTPUT
          fi
          image_tag=$(echo "$image_tag" | tr / _)
          echo "IMAGE_TAG=$image_tag" >> $GITHUB_OUTPUT

      - name: Create Cache Registry
        id: cache-docker-images
        uses: actions/cache@v2
        with:
          path: ${{ env.IMAGE_CACHE_DIR }}
          key: ${{ runner.os }}-docker-images-${{ steps.env1.outputs.GITHUB_SHA }}

      - uses: actions/checkout@v2
        with:
          ref: ${{ steps.env1.outputs.BRANCH_NAME }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@master
        with:
          aws-region: ap-southeast-2
          role-to-assume: ${{ secrets.ROLE }}
          role-session-name: GithubActions-${{ inputs.app }}-ci

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: set more envs
        id: env2
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          DOCKER_ECR=${{ secrets.DOCKER_ECR }}
          VERSION=$(${{ inputs.version_command }})
          BASE_IMAGE="${DOCKER_ECR}ruby-base:${VERSION}"
          echo "BASE_IMAGE=$BASE_IMAGE" >> $GITHUB_OUTPUT
          # Strip git ref prefix from version
          IMAGE_ID=$(echo "$ECR_REGISTRY/${{ inputs.ecr_repository }}" | tr '[A-Z]' '[a-z]')
          echo "ECR_REGISTRY=$ECR_REGISTRY" >> $GITHUB_OUTPUT
          echo "IMAGE_ID=$IMAGE_ID" >> $GITHUB_OUTPUT

      # - name: pull cache
      #   run: docker pull ${{ steps.env2.outputs.IMAGE_ID }}:cache || echo "true"

      - name: Build Test OCI Image
        uses: docker/build-push-action@v2
        with:
          cache-from: ${{ steps.env2.outputs.IMAGE_ID }}:cache
          target: development
          build-args: |
            BASE_IMAGE=${{ steps.env2.outputs.BASE_IMAGE }}
            BUILDKIT_INLINE_CACHE=1
          context: .
          tags: ${{ inputs.app }}:cache
          outputs: type=local,dest=${{ env.IMAGE_CACHE_DIR }}/${{ env.IMAGE_CACHE_KEY }}.tar

  build-production:
    needs: [build-base]
    if: needs.build-base.result == 'success'
    runs-on: ubuntu-latest
    name: Build production
    steps:
      - name: Declare Cache Registry
        id: cache-docker-images
        uses: actions/cache@v2
        with:
          path: ${{ env.IMAGE_CACHE_DIR }}
          key: ${{ runner.os }}-docker-images-${{ needs.base-image.outputs.GITHUB_SHA }}

      - uses: actions/checkout@v2
        with:
          ref: ${{ needs.build-base.outputs.BRANCH_NAME }}

      - name: Load Docker images from previous workflows
        run: |
          docker load --input ${{ env.IMAGE_CACHE_DIR }}/${{ env.IMAGE_CACHE_KEY }}.tar

      - name: Build Production OCI Image
        uses: docker/build-push-action@v2
        with:
          cache-from: ${{ inputs.app }}:cache
          target: development
          build-args: |
            BASE_IMAGE=${{ needs.build-base.outputs.BASE_IMAGE }}
            BUILDKIT_INLINE_CACHE=1
            RELEASE_VERSION=${{ needs.build-base.outputs.IMAGE_TAG }}
          context: .
          tags: ${{ needs.build-base.outputs.IMAGE_ID }}:${{ needs.build-base.outputs.IMAGE_TAG }}
          outputs: type=local,dest=${{ env.IMAGE_CACHE_DIR }}/${{ env.IMAGE_STABLE_KEY }}.tar

  run-tests:
    needs: [build-base]
    if: inputs.test_command != '' && needs.build-base.result == 'success'
    runs-on: ubuntu-latest
    name: run task 1
    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: password
        ports:
          - "3306:3306"
    steps:
      - name: Declare Cache Registry
        id: cache-docker-images
        uses: actions/cache@v2
        with:
          path: ${{ env.IMAGE_CACHE_DIR }}
          key: ${{ runner.os }}-docker-images-${{ needs.base-image.outputs.GITHUB_SHA }}

      - name: Ensure MySQL is ready
        timeout-minutes: 5
        run: |
          while ! mysqladmin ping -h"127.0.0.1" --silent; do
            sleep 1
          done

      - name: Tests
        env:
          DATABASE_USERNAME: root
          DATABASE_PASSWORD: password
          DATABASE_HOST: host.docker.internal
          PREPARE_DB: true
          RAILS_ENV: test
        run: |
          docker load --input ${{ env.IMAGE_CACHE_DIR }}/${{ env.IMAGE_CACHE_KEY }}.tar
          ${{ inputs.test_command }}
  run-task-1:
    needs: [build-base]
    if: inputs.task_1 != '' && needs.build-base.result == 'success'
    runs-on: ubuntu-latest
    name: run task 1
    steps:
      - name: Declare Cache Registry
        id: cache-docker-images
        uses: actions/cache@v2
        with:
          path: ${{ env.IMAGE_CACHE_DIR }}
          key: ${{ runner.os }}-docker-images-${{ needs.base-image.outputs.GITHUB_SHA }}

      - name: Run task 1
        run: |
          docker load --input ${{ env.IMAGE_CACHE_DIR }}/${{ env.IMAGE_CACHE_KEY }}.tar
          ${{ inputs.task_1 }}
  run-task-2:
    needs: [build-base]
    if: inputs.task_2 != '' && needs.build-base.result == 'success'
    runs-on: ubuntu-latest
    name: run task 2
    steps:
      - name: Declare Cache Registry
        id: cache-docker-images
        uses: actions/cache@v2
        with:
          path: ${{ env.IMAGE_CACHE_DIR }}
          key: ${{ runner.os }}-docker-images-${{ needs.base-image.outputs.GITHUB_SHA }}

      - name: Run task 2
        run: |
          docker load --input ${{ env.IMAGE_CACHE_DIR }}/${{ env.IMAGE_CACHE_KEY }}.tar
          ${{ inputs.task_2 }}
  run-task-3:
    needs: [build-base]
    if: inputs.task_3 != '' && needs.build-base.result == 'success'
    runs-on: ubuntu-latest
    name: run task 3
    steps:
      - name: Declare Cache Registry
        id: cache-docker-images
        uses: actions/cache@v2
        with:
          path: ${{ env.IMAGE_CACHE_DIR }}
          key: ${{ runner.os }}-docker-images-${{ needs.base-image.outputs.GITHUB_SHA }}

      - name: Run task 3
        run: |
          docker load --input ${{ env.IMAGE_CACHE_DIR }}/${{ env.IMAGE_CACHE_KEY }}.tar
          ${{ inputs.task_3 }}
  push-images:
    needs: [build-production, run-tests, run-task-1, run-task-2, run-task-3]
    if: needs.build-production.result == 'success' && needs.run-tests.result == 'success' && needs.run-task-1.result == 'success' && needs.run-task-2.result == 'success' && needs.run-task-3.result == 'success'
    runs-on: ubuntu-latest
    name: push images
    steps:
      - name: Declare Cache Registry
        id: cache-docker-images
        uses: actions/cache@v2
        with:
          path: ${{ env.IMAGE_CACHE_DIR }}
          key: ${{ runner.os }}-docker-images-${{ needs.base-image.outputs.GITHUB_SHA }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@master
        with:
          aws-region: ap-southeast-2
          role-to-assume: ${{ secrets.ROLE }}
          role-session-name: GithubActions-federationmanager-ci

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Push to ECR
        if: (github.event_name == 'push' && env.BRANCH_NAME == '${{ inputs.default_branch }}') || github.event_name == 'issue_comment'
        run: |
          docker load --input ${{ env.IMAGE_CACHE_DIR }}/${{ env.IMAGE_STABLE_KEY }}.tar
          docker push ${{ needs.build-base.outputs.IMAGE_ID }}:${{ needs.build-base.outputs.IMAGE_TAG }}

      - name: Push cache to ECR
        if: (github.event_name == 'push' && env.BRANCH_NAME == '${{ inputs.default_branch }}')
        run: |
          docker load --input ${{ env.IMAGE_CACHE_DIR }}/${{ env.IMAGE_CACHE_KEY }}.tar
          docker push ${{ inputs.app }}:cache

      - name: Update GitOps Repo to trigger deploys
        if: env.BRANCH_NAME == '${{ inputs.default_branch }}' && github.event_name == 'push'
        run: |
          printenv > .envs
           docker run --env-file .envs \
           -e PROJECTS="${{ inputs.app }}" \
           -e ENVIRONMENTS="${{ inputs.environments }}" \
           ${{ needs.build-base.outputs.ECR_REGISTRY }}/publish_app:latest

      - name: Update GitOps Repo to trigger deploys for development
        if: github.event_name == 'issue_comment'
        run: |
          printenv > .envs
           docker run --env-file .envs \
           -e PROJECTS="${{ inputs.app }}" \
           -e ENVIRONMENTS="development" \
           ${{ needs.build-base.outputs.ECR_REGISTRY }}/publish_app:latest
  notify:
    needs:
      [
        build-base,
        build-production,
        run-tests,
        run-task-1,
        run-task-2,
        run-task-3,
        push-images,
      ]
    if: github.event_name == 'issue_comment' && always()
    runs-on: ubuntu-latest
    name: notify
    steps:
      - name: check for failures
        run: |
          output=
          if [ "${{ needs.run-tests.result }}" != "success"]; then 
            output="${output}Run tests failed! "
          fi

          if [ "${{ needs.run-task-1.result }}" != "success"]; then 
            output="${output}Run task 1 failed! "
          fi

          if [ "${{ needs.run-task-2.result }}" != "success"]; then 
            output="${output}Run task 2 failed! "
          fi

          if [ "${{ needs.run-task-3.result }}" != "success"]; then 
            output="${output}Run task 3 failed! "
          fi

          if [ "${{ needs.build-base.result }}" != "success"]; then 
            output="${output}build base failed! "
          fi

          if [ "${{ needs.build-production.result }}" != "success"]; then 
            output="${output}build production failed! "
          fi

          if [ "${{ needs.push-images.result }}" != "success"]; then 
            output="${output}push images failed!"
          fi

          status="failure"

          if [ "$output" == ""]; then 
            output="Manifest updated, Deploying to ${{ inputs.app }}.dev.aaf.edu.au (may take up to 5 minutes)"
            status="success"
          fi
          echo "ADHOC_OUTPUT=$output" >> $GITHUB_ENV
          echo "ADHOC_STATUS=$status" >> $GITHUB_ENV

      - name: Set final commit status
        uses: myrotvorets/set-commit-status-action@master
        with:
          sha: ${{ needs.build-base.outputs.ISSUE_COMMENT_HEAD_SHA }}
          token: ${{ secrets.GITHUB_TOKEN }}
          status: ${{ env.ADHOC_STATUS }}
          targetUrl: https://${{ inputs.app }}.dev.aaf.edu.au
          description: ${{ env.ADHOC_OUTPUT }}
          context: "Dev federation deploy"
