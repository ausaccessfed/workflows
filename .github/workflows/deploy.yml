name: Build Docker Image
on:
  workflow_call:
    inputs:
      ecr_repository:
        required: true
        type: string
      url:
        required: true
        type: string
      event_name:
        required: true
        type: string
      default_branch:
        required: true
        type: string
      version_command:
        required: true
        type: string
      test_command:
        required: true
        type: string
      task_1_name:
        default: "N/A"
        type: string
      task_1:
        default: 'echo "no command"'
        type: string
      task_2_name:
        default: "N/A"
        type: string
      task_2:
        default: 'echo "no command"'
        type: string
      task_3_name:
        default: "N/A"
        type: string
      task_3:
        default: 'echo "no command"'
        type: string
      production_environments:
        required: true
        type: string
    secrets:
      DOCKER_ECR:
        required: true
      ROLE:
        required: true
jobs:
  run:
    runs-on: ubuntu-latest
    name: run
    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: password
        ports:
          - "3306:3306"
    steps:
      - uses: xt0rted/pull-request-comment-branch@v1
        if: github.event_name == 'issue_comment'
        id: comment-branch

      - name: Set commit status as pending
        uses: myrotvorets/set-commit-status-action@master
        if: github.event_name == 'issue_comment'
        with:
          sha: ${{ steps.comment-branch.outputs.head_sha }}
          token: ${{ secrets.GITHUB_TOKEN }}
          status: pending
          description: "testing, building and pushing image"
          context: "Dev federation deploy"

      - id: env1
        name: set envs
        run: |
          ## PR comment branch || pr branch || default branch
          if [ "${{ steps.comment-branch.outputs.head_ref }}" != "" ]; then
            branch_name="${{ steps.comment-branch.outputs.head_ref }}"
          elif [ "${{ github.head_ref }}" != "" ]; then
            branch_name="${{ github.head_ref }}"
          else
            branch_name="${{ github.ref_name }}"
          fi
          echo "BRANCH_NAME=$branch_name" >> $GITHUB_OUTPUT

          if [ "${{ github.event_name }}" == "issue_comment" ]; then
            image_tag=adhoc-${{steps.comment-branch.outputs.head_ref}}-${{steps.comment-branch.outputs.head_sha}}
          else
            image_tag=stable-${{ github.sha }}
          fi
          image_tag=$(echo "$image_tag" | tr / _)
          echo "IMAGE_TAG=$image_tag" >> $GITHUB_OUTPUT

      - uses: actions/checkout@v2
        with:
          ref: ${{ steps.env1.outputs.BRANCH_NAME }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@master
        with:
          aws-region: ap-southeast-2
          role-to-assume: ${{ secrets.ROLE }}
          role-session-name: GithubActions-${{ inputs.ecr_repository }}-ci

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: set more envs
        id: env2
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          DOCKER_ECR=${{ secrets.DOCKER_ECR }}
          VERSION=$(${{ inputs.version_command }})
          BASE_IMAGE="${DOCKER_ECR}ruby-base:${VERSION}"
          echo "BASE_IMAGE=$BASE_IMAGE" >> $GITHUB_OUTPUT
          # Strip git ref prefix from version
          IMAGE_ID=$(echo "$ECR_REGISTRY/${{ inputs.ecr_repository }}" | tr '[A-Z]' '[a-z]')
          echo "ECR_REGISTRY=$ECR_REGISTRY" >> $GITHUB_OUTPUT
          echo "IMAGE_ID=$IMAGE_ID" >> $GITHUB_OUTPUT

      - name: Build Test OCI Image
        run: |
          docker pull ${{ steps.env2.outputs.IMAGE_ID }}:cache || echo "true"
          DOCKER_BUILDKIT=1 docker build --target development \
          --build-arg BASE_IMAGE=${{ steps.env2.outputs.BASE_IMAGE }} \
          --build-arg BUILDKIT_INLINE_CACHE=1 \
          --cache-from ${{ steps.env2.outputs.IMAGE_ID }}:cache \
          -t ${{ steps.env2.outputs.IMAGE_ID }}:cache \
          -t app:cache .

      - name: Ensure MySQL is ready
        if: inputs.test_command != ''
        timeout-minutes: 5
        run: |
          while ! mysqladmin ping -h"127.0.0.1" --silent; do
            sleep 1
          done

      - name: Run ${{ inputs.task_1_name }}
        if: inputs.task_1 != ''
        run: |
          ${{ inputs.task_1 }}

      - name: Run ${{ inputs.task_2_name }}
        if: inputs.task_2 != ''
        run: |
          ${{ inputs.task_2 }}

      - name: Run ${{ inputs.task_3_name }}
        if: inputs.task_3 != ''
        run: |
          ${{ inputs.task_3 }}

      - name: Tests
        if: inputs.test_command != ''
        env:
          DATABASE_USERNAME: root
          DATABASE_PASSWORD: password
          DATABASE_HOST: host.docker.internal
          PREPARE_DB: true
          RAILS_ENV: test
        run: |
          ${{ inputs.test_command }}

      - name: Build Production OCI Image
        run: |
          DOCKER_BUILDKIT=1 docker build --cache-from ${{ steps.env2.outputs.IMAGE_ID }}:cache \
          --build-arg BASE_IMAGE=${{ steps.env2.outputs.BASE_IMAGE }} \
          --build-arg RELEASE_VERSION=${{ steps.env1.outputs.IMAGE_TAG }} \
          -t ${{ steps.env2.outputs.IMAGE_ID }}:${{ steps.env1.outputs.IMAGE_TAG }} .

      - name: Push to ECR
        if: (github.event_name == 'push' && steps.env1.outputs.BRANCH_NAME == '${{ inputs.default_branch }}') || github.event_name == 'issue_comment'
        run: |
          docker push ${{ steps.env2.outputs.IMAGE_ID }}:${{ steps.env1.outputs.IMAGE_TAG }}

      - name: Push cache to ECR
        if: (github.event_name == 'push' &&  steps.env1.outputs.BRANCH_NAME == '${{ inputs.default_branch }}')
        run: |
          docker push ${{ steps.env2.outputs.IMAGE_ID }}:cache
          #todo: retag to ecr

      - name: Update GitOps Repo to trigger deploys
        if: steps.env1.outputs.BRANCH_NAME == '${{ inputs.default_branch }}' && github.event_name == 'push'
        run: |
          printenv > .envs
           docker run --env-file .envs \
           -e PROJECTS="${{ inputs.ecr_repository }}" \
           -e ENVIRONMENTS="${{ inputs.environments }}" \
           ${{ steps.env2.outputs.ECR_REGISTRY }}/publish_app:latest

      - name: Update GitOps Repo to trigger deploys for development
        if: github.event_name == 'issue_comment'
        run: |
          printenv > .envs
           docker run --env-file .envs \
           -e PROJECTS="${{ inputs.ecr_repository }}" \
           -e ENVIRONMENTS="development" \
           ${{ steps.env2.outputs.ECR_REGISTRY }}/publish_app:latest

      - name: check for failures
        id: failure-check
        if: github.event_name == 'issue_comment' && always()
        run: |
          output=
          status="failure"
          if [ "${{ needs.run.result }}" != "success"]; then 
            output="${output}push images failed!"
          fi

          if [ "$output" == ""]; then 
            output="Manifest updated, Deploying to ${{ inputs.url }} (may take up to 5 minutes)"
            status="success"
          fi
          echo "ADHOC_OUTPUT=$output" >> $GITHUB_OUTPUT
          echo "ADHOC_STATUS=$status" >> $GITHUB_OUTPUT

      - name: Set final commit status
        if: github.event_name == 'issue_comment' && always()
        uses: myrotvorets/set-commit-status-action@master
        with:
          sha: ${{ steps.comment-branch.outputs.head_ref }}
          token: ${{ secrets.GITHUB_TOKEN }}
          status: ${{ steps.failure-check.outputs.ADHOC_STATUS }}
          targetUrl: ${{ inputs.url }}
          description: ${{ steps.failure-check.outputs.ADHOC_OUTPUT }}
          context: "Dev federation deploy"
