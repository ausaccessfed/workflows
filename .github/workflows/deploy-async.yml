name: Build Docker Image
on:
  workflow_call:
    inputs:
      ecr_repository:
        required: true
        type: string
      dev_url:
        required: true
        type: string
      event_name:
        required: true
        type: string
      default_branch:
        default: "master"
        type: string
      version_command:
        default: "cat .ruby-version"
        type: string
      test_command:
        default: ""
        type: string
      task_1_name:
        default: "N/A"
        type: string
      task_1:
        default: ""
        type: string
      task_2_name:
        default: "N/A"
        type: string
      task_2:
        default: ""
        type: string
      task_3_name:
        default: "N/A"
        type: string
      task_3:
        default: ""
        type: string
      production_environments:
        required: true
        type: string
    secrets:
      DOCKER_ECR:
        required: true
      ROLE:
        required: true

jobs:
  build-base:
    runs-on: ubuntu-latest
    name: Build base
    outputs:
      BRANCH_NAME: ${{ steps.env1.outputs.BRANCH_NAME }}
      ISSUE_COMMENT_HEAD_SHA: ${{ steps.env1.outputs.ISSUE_COMMENT_HEAD_SHA }}
      IMAGE_TAG: ${{ steps.env1.outputs.IMAGE_TAG }}
      TEMP_CACHE_IMAGE_TAG: ${{ steps.env1.outputs.TEMP_CACHE_IMAGE_TAG }}
      TEMP_STABLE_IMAGE_TAG: ${{ steps.env1.outputs.TEMP_STABLE_IMAGE_TAG }}
      BASE_IMAGE: ${{ steps.env2.outputs.BASE_IMAGE }}
    steps:
      - uses: xt0rted/pull-request-comment-branch@v1
        if: github.event_name == 'issue_comment'
        id: comment-branch

      - name: Set commit status as pending
        uses: myrotvorets/set-commit-status-action@master
        if: github.event_name == 'issue_comment'
        with:
          sha: ${{ steps.comment-branch.outputs.head_sha }}
          token: ${{ secrets.GITHUB_TOKEN }}
          status: pending
          description: "testing, building and pushing image"
          context: "Dev federation deploy"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@master
        with:
          aws-region: ap-southeast-2
          role-to-assume: ${{ secrets.ROLE }}
          role-session-name: GithubActions-${{ inputs.ecr_repository }}-ci

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - id: env1
        name: set envs
        run: |
          ## PR comment branch || pr branch || default branch
          if [ "${{ steps.comment-branch.outputs.head_ref }}" != "" ]; then
            branch_name="${{ steps.comment-branch.outputs.head_ref }}"
          elif [ "${{ github.head_ref }}" != "" ]; then
            branch_name="${{ github.head_ref }}"
          else
            branch_name="${{ github.ref_name }}"
          fi
          echo "BRANCH_NAME=$branch_name" >> $GITHUB_OUTPUT

          if [ "${{ github.event_name }}" == "issue_comment" ]; then
              echo "ISSUE_COMMENT_HEAD_SHA=${{ steps.comment-branch.outputs.head_sha }}" >> $GITHUB_OUTPUT
            image_tag=adhoc-${{steps.comment-branch.outputs.head_ref}}-${{steps.comment-branch.outputs.head_sha}}
          else
            image_tag=stable-${{ github.sha }}
          fi
          image_tag=$(echo "$image_tag" | tr / _)
          echo "IMAGE_TAG=$image_tag" >> $GITHUB_OUTPUT

          temp_cache_image_tag=temp-cache-$(echo "$branch_name" | tr / _)
          echo "TEMP_CACHE_IMAGE_TAG=$temp_cache_image_tag" >> $GITHUB_OUTPUT

          temp_stable_image_tag=temp-stable-$(echo "$branch_name" | tr / _)
          echo "TEMP_STABLE_IMAGE_TAG=$temp_stable_image_tag" >> $GITHUB_OUTPUT

          ECR_REGISTRY="${{ steps.login-ecr.outputs.registry }}"
          echo "ECR_REGISTRY=$ECR_REGISTRY" >> $GITHUB_OUTPUT

      - uses: actions/checkout@v2
        with:
          ref: ${{ steps.env1.outputs.BRANCH_NAME }}

      - name: set more envs
        id: env2
        run: |
          BASE_IMAGE="ruby-base:$(${{ inputs.version_command }})"
          echo "BASE_IMAGE=$BASE_IMAGE" >> $GITHUB_OUTPUT
          IMAGE_ID=$(echo "${{ steps.login-ecr.outputs.registry }}/${{ inputs.ecr_repository }}" | tr '[A-Z]' '[a-z]')
          echo "IMAGE_ID=$IMAGE_ID" >> $GITHUB_ENV

      - name: Build Test OCI Image
        run: |
          cache_from_command=""
          docker manifest inspect ${{ env.IMAGE_ID }}:${{ steps.env1.outputs.TEMP_CACHE_IMAGE_TAG }} > /dev/null 2>&1 
          if [ "$?" == "0" ]; then
            docker pull ${{ env.IMAGE_ID }}:${{ steps.env1.outputs.TEMP_CACHE_IMAGE_TAG }}
            cache_from_command="--cache-from ${{ env.IMAGE_ID }}:${{ steps.env1.outputs.TEMP_CACHE_IMAGE_TAG }}"
          else
            docker manifest inspect ${{ env.IMAGE_ID }}:cache > /dev/null 2>&1 
            if [ "$?" == "0" ]; then
              docker pull ${{ env.IMAGE_ID }}:cache
              cache_from_command="--cache-from ${{ env.IMAGE_ID }}:cache"
            fi
          fi

          docker pull ${{ env.IMAGE_ID }}:${{ steps.env1.outputs.TEMP_CACHE_IMAGE_TAG }} || echo "not found"
          DOCKER_BUILDKIT=1 docker build --target development \
          --build-arg BASE_IMAGE=${{ secrets.DOCKER_ECR }}${{ steps.env2.outputs.BASE_IMAGE }} \
          --build-arg BUILDKIT_INLINE_CACHE=1 \
          $cache_from_command \
          -t ${{ env.IMAGE_ID }}:${{ steps.env1.outputs.TEMP_CACHE_IMAGE_TAG }}  .
          docker push ${{ env.IMAGE_ID }}:${{ steps.env1.outputs.TEMP_CACHE_IMAGE_TAG }}
  build-production:
    needs: [build-base]
    if: needs.build-base.result == 'success'
    runs-on: ubuntu-latest
    name: Build production
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ needs.build-base.outputs.BRANCH_NAME }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@master
        with:
          aws-region: ap-southeast-2
          role-to-assume: ${{ secrets.ROLE }}
          role-session-name: GithubActions-${{ inputs.ecr_repository }}-ci

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build Production OCI Image
        run: |
          IMAGE_ID=$(echo "${{ steps.login-ecr.outputs.registry }}/${{ inputs.ecr_repository }}" | tr '[A-Z]' '[a-z]')
          docker pull $IMAGE_ID:${{ needs.build-base.outputs.TEMP_CACHE_IMAGE_TAG }}
          BASE_IMAGE="${{ secrets.DOCKER_ECR }}${{ needs.build-base.outputs.BASE_IMAGE }}"
          DOCKER_BUILDKIT=1 docker build \
          --cache-from $IMAGE_ID:${{ needs.build-base.outputs.TEMP_CACHE_IMAGE_TAG }} \
          --build-arg BASE_IMAGE=$BASE_IMAGE \
          --build-arg RELEASE_VERSION=${{ needs.build-base.outputs.IMAGE_TAG }} \
          -t $IMAGE_ID:${{ needs.build-base.outputs.TEMP_STABLE_IMAGE_TAG }} .
          docker push $IMAGE_ID:${{ needs.build-base.outputs.TEMP_STABLE_IMAGE_TAG }}
  run-tests:
    needs: [build-base]
    if: inputs.test_command != '' && needs.build-base.result == 'success'
    runs-on: ubuntu-latest
    name: run tests
    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: password
        ports:
          - "3306:3306"
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ steps.env1.outputs.BRANCH_NAME }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@master
        with:
          aws-region: ap-southeast-2
          role-to-assume: ${{ secrets.ROLE }}
          role-session-name: GithubActions-${{ inputs.ecr_repository }}-ci

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Ensure MySQL is ready
        timeout-minutes: 5
        run: |
          while ! mysqladmin ping -h"127.0.0.1" --silent; do
            sleep 1
          done

      - name: Download cache image
        run: |
          IMAGE_ID=$(echo "${{ steps.login-ecr.outputs.registry }}/${{ inputs.ecr_repository }}" | tr '[A-Z]' '[a-z]')
          docker pull $IMAGE_ID:${{ needs.build-base.outputs.TEMP_CACHE_IMAGE_TAG }}
          docker tag $IMAGE_ID:${{ needs.build-base.outputs.TEMP_CACHE_IMAGE_TAG }} app:cache

      - name: Tests
        run: |
          ${{ inputs.test_command }}
  run-task-1:
    needs: [build-base]
    if: inputs.task_1 != '' && needs.build-base.result == 'success'
    runs-on: ubuntu-latest
    name: Run ${{ inputs.task_1_name }}
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@master
        with:
          aws-region: ap-southeast-2
          role-to-assume: ${{ secrets.ROLE }}
          role-session-name: GithubActions-${{ inputs.ecr_repository }}-ci

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Download cache image
        run: |
          IMAGE_ID=$(echo "${{ steps.login-ecr.outputs.registry }}/${{ inputs.ecr_repository }}" | tr '[A-Z]' '[a-z]')
          docker pull $IMAGE_ID:${{ needs.build-base.outputs.TEMP_CACHE_IMAGE_TAG }}
          docker tag  $IMAGE_ID:${{ needs.build-base.outputs.TEMP_CACHE_IMAGE_TAG }} app:cache

      - name: Run ${{ inputs.task_1_name }}
        run: |
          ${{ inputs.task_1 }}
  run-task-2:
    needs: [build-base]
    if: inputs.task_2 != '' && needs.build-base.result == 'success'
    runs-on: ubuntu-latest
    name: Run ${{ inputs.task_2_name }}
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@master
        with:
          aws-region: ap-southeast-2
          role-to-assume: ${{ secrets.ROLE }}
          role-session-name: GithubActions-${{ inputs.ecr_repository }}-ci

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Download cache image
        run: |
          IMAGE_ID=$(echo "${{ steps.login-ecr.outputs.registry }}/${{ inputs.ecr_repository }}" | tr '[A-Z]' '[a-z]')
          docker pull $IMAGE_ID:${{ needs.build-base.outputs.TEMP_CACHE_IMAGE_TAG }}
          docker tag  $IMAGE_ID:${{ needs.build-base.outputs.TEMP_CACHE_IMAGE_TAG }} app:cache

      - name: Run ${{ inputs.task_2_name }}
        run: |
          ${{ inputs.task_2 }}
  run-task-3:
    needs: [build-base]
    if: inputs.task_3 != '' && needs.build-base.result == 'success'
    runs-on: ubuntu-latest
    name: Run ${{ inputs.task_3_name }}
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@master
        with:
          aws-region: ap-southeast-2
          role-to-assume: ${{ secrets.ROLE }}
          role-session-name: GithubActions-${{ inputs.ecr_repository }}-ci

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Download cache image
        run: |
          IMAGE_ID=$(echo "${{ steps.login-ecr.outputs.registry }}/${{ inputs.ecr_repository }}" | tr '[A-Z]' '[a-z]')
          docker pull $IMAGE_ID:${{ needs.build-base.outputs.TEMP_CACHE_IMAGE_TAG }}
          docker tag  $IMAGE_ID:${{ needs.build-base.outputs.TEMP_CACHE_IMAGE_TAG }} app:cache

      - name: Run ${{ inputs.task_3_name }}
        run: |
          ${{ inputs.task_3 }}
  push-images:
    needs: [build-production, run-tests, run-task-1, run-task-2, run-task-3]
    if: ((github.event_name == 'push' && needs.build-base.outputs.BRANCH_NAME == inputs.default_branch) || github.event_name == 'issue_comment') && needs.build-production.result == 'success' && needs.run-tests.result == 'success' && needs.run-task-1.result == 'success' && needs.run-task-2.result == 'success' && needs.run-task-3.result == 'success'
    runs-on: ubuntu-latest
    name: push images
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@master
        with:
          aws-region: ap-southeast-2
          role-to-assume: ${{ secrets.ROLE }}
          role-session-name: GithubActions-federationmanager-ci

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Push to ECR
        if: (github.event_name == 'push' && needs.build-base.outputs.BRANCH_NAME == inputs.default_branch) || github.event_name == 'issue_comment'
        run: |
          IMAGE_ID=$(echo "${{ steps.login-ecr.outputs.registry }}/${{ inputs.ecr_repository }}" | tr '[A-Z]' '[a-z]')
          docker pull $IMAGE_ID:${{ needs.build-base.outputs.TEMP_STABLE_IMAGE_TAG }}
          docker tag $IMAGE_ID:${{ needs.build-base.outputs.TEMP_STABLE_IMAGE_TAG }} $IMAGE_ID:${{ needs.build-base.outputs.IMAGE_TAG }}
          docker push $IMAGE_ID:${{ needs.build-base.outputs.IMAGE_TAG }}

      - name: Push cache to ECR
        if: (github.event_name == 'push' && needs.build-base.outputs.BRANCH_NAME == inputs.default_branch)
        run: |
          IMAGE_ID=$(echo "${{ steps.login-ecr.outputs.registry }}/${{ inputs.ecr_repository }}" | tr '[A-Z]' '[a-z]')
          docker pull $IMAGE_ID:${{ needs.build-base.outputs.TEMP_CACHE_IMAGE_TAG }}
          docker tag $IMAGE_ID:${{ needs.build-base.outputs.CACHE_IMAGE_TAG }}  $IMAGE_ID:cache
          docker push $IMAGE_ID:cache

      - name: Update GitOps Repo to trigger deploys
        if: needs.build-base.outputs.BRANCH_NAME == inputs.default_branch && github.event_name == 'push'
        run: |
          printenv > .envs
           docker run --env-file .envs \
           -e PROJECTS="${{ inputs.ecr_repository }}" \
           -e IMAGE_TAG=${{ needs.build-base.outputs.IMAGE_TAG }} \
           -e ENVIRONMENTS="${{ inputs.environments }}" \
           -e ECR_REPOSITORY="${{ inputs.ecr_repository }}" \
           ${{ steps.login-ecr.outputs.registry }}/publish_app:latest

      - name: Update GitOps Repo to trigger deploys for development
        if: github.event_name == 'issue_comment'
        run: |
          printenv > .envs
           docker run --env-file .envs \
           -e PROJECTS="${{ inputs.ecr_repository }}" \
           -e IMAGE_TAG=${{ needs.build-base.outputs.IMAGE_TAG }} \
           -e ENVIRONMENTS="development" \
           -e ECR_REPOSITORY="${{ inputs.ecr_repository }}" \
           ${{ steps.login-ecr.outputs.registry }}/publish_app:latest
  notify:
    needs:
      [
        build-base,
        build-production,
        run-tests,
        run-task-1,
        run-task-2,
        run-task-3,
        push-images,
      ]
    if: github.event_name == 'issue_comment' && always()
    runs-on: ubuntu-latest
    name: notify
    steps:
      - name: check for failures
        run: |
          output=
          if [ "${{ needs.run-tests.result }}" != "success"]; then 
            output="${output}Run tests failed! "
          fi

          if [ "${{ needs.run-task-1.result }}" != "success"]; then 
            output="${output}Run task 1 failed! "
          fi

          if [ "${{ needs.run-task-2.result }}" != "success"]; then 
            output="${output}Run task 2 failed! "
          fi

          if [ "${{ needs.run-task-3.result }}" != "success"]; then 
            output="${output}Run task 3 failed! "
          fi

          if [ "${{ needs.build-base.result }}" != "success"]; then 
            output="${output}build base failed! "
          fi

          if [ "${{ needs.build-production.result }}" != "success"]; then 
            output="${output}build production failed! "
          fi

          if [ "${{ needs.push-images.result }}" != "success"]; then 
            output="${output}push images failed!"
          fi

          status="failure"

          if [ "$output" == ""]; then 
            output="Manifest updated, Deploying to ${{ inputs.dev_url }} (may take up to 5 minutes)"
            status="success"
          fi
          echo "ADHOC_OUTPUT=$output" >> $GITHUB_ENV
          echo "ADHOC_STATUS=$status" >> $GITHUB_ENV

      - name: Set final commit status
        uses: myrotvorets/set-commit-status-action@master
        with:
          sha: ${{ needs.build-base.outputs.ISSUE_COMMENT_HEAD_SHA }}
          token: ${{ secrets.GITHUB_TOKEN }}
          status: ${{ env.ADHOC_STATUS }}
          targetUrl: ${{ inputs.dev_url }}
          description: ${{ env.ADHOC_OUTPUT }}
          context: "Dev federation deploy"
