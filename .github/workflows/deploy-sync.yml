name: Build Docker Image
on:
  workflow_call:
    inputs:
      # If not provided then assumes auto generated stable-SHA256
      image_tag:
        default: ""
        type: string
      # currently only supresses image scans/lints, but can be expanded if needed
      supress_task_failures:
        default: true
        type: boolean
      ecr_repository:
        required: true
        type: string
      dev_url:
        default: ""
        type: string
      event_name:
        required: true
        type: string
      event_comment_body:
        default: ""
        type: string
      event_comment_id:
        default: ""
        type: string
      default_branch:
        default: "master"
        type: string
      ## if not set defaults to default_branch
      default_branch_for_caching:
        default: ""
        type: string
      ## if not set defaults to default_branch
      default_develop_branch:
        default: ""
        type: string
      version_command:
        default: "cat .ruby-version"
        type: string
      ## if not set defaults to ecr_repository
      projects:
        default: ""
        type: string
      ## if not set will use docker build, if set will use buildx
      platforms:
        default: ""
        type: string
      runner:
        default: "ubuntu-latest"
        type: string
      extra_task_1_name:
        default: "N/A"
        type: string
      extra_task_1:
        default: ""
        type: string
      extra_task_2_name:
        default: "N/A"
        type: string
      extra_task_2:
        default: ""
        type: string
      extra_task_3_name:
        default: "N/A"
        type: string
      extra_task_3:
        default: ""
        type: string
      extra_task_4_name:
        default: "N/A"
        type: string
      extra_task_4:
        default: ""
        type: string
      extra_task_5_name:
        default: "N/A"
        type: string
      extra_task_5:
        default: ""
        type: string
      extra_task_6_name:
        default: "N/A"
        type: string
      extra_task_6:
        default: ""
        type: string
      development_environments:
        default: "development"
        type: string
      test_environments:
        default: ""
        type: string
      production_environments:
        default: "test,production"
        type: string
    secrets:
      DOCKER_ECR:
        required: true
      ROLE:
        required: true
      SNYK_TOKEN:
        required: true
jobs:
  run:
    runs-on: ${{ inputs.runner }}
    name: run
    if: inputs.event_name != 'issue_comment' || (contains(inputs.event_comment_body, '/deploy')  && contains('phyzical,ArthurZheng,ritchiey,matthew-puku,rianniello,Kfoster14,waldofouche,Bo', github.event.author.login))
    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: password
        ports:
          - "3306:3306"
    steps:
      - name: Delete huge unnecessary tools folder
        run: rm -rf /opt/hostedtoolcache

      - uses: xt0rted/pull-request-comment-branch@d97294d304604fa98a2600a6e2f916a84b596dc7 # v2.0.0
        if: inputs.event_name == 'issue_comment'
        id: comment-branch

      - name: Set commit status as pending
        uses: myrotvorets/set-commit-status-action@38f3f27c7d52fb381273e95542f07f0fba301307 # v2.0.0
        if: inputs.event_name == 'issue_comment'
        with:
          sha: ${{ steps.comment-branch.outputs.head_sha }}
          token: ${{ secrets.GITHUB_TOKEN }}
          status: pending
          description: "testing, building and pushing image"
          context: "Dev federation deploy"

      - id: env1
        name: set envs
        run: |
          ## PR comment branch || pr branch || default branch
          if [ "${{ steps.comment-branch.outputs.head_ref }}" != "" ]; then
            branch_name="${{ steps.comment-branch.outputs.head_ref }}"
          elif [ "${{ github.head_ref }}" != "" ]; then
            branch_name="${{ github.head_ref }}"
          else
            branch_name="${{ github.ref_name }}"
          fi
          echo "BRANCH_NAME=$branch_name" >> $GITHUB_OUTPUT

          if [ "${{ inputs.image_tag }}" != "" ]; then
            image_tag="${{ inputs.image_tag }}"
          elif [ "${{ inputs.event_name }}" == "issue_comment" ]; then
            image_tag=adhoc-${{steps.comment-branch.outputs.head_ref}}-${{steps.comment-branch.outputs.head_sha}}
          else
            image_tag=stable-${{ github.sha }}
          fi
          image_tag=$(echo "$image_tag" | tr / _)
          echo "IMAGE_TAG=$image_tag" >> $GITHUB_OUTPUT

      - uses: actions/checkout@8ade135a41bc03ea155e62e844d188df1ea18608 # v4.1.0
        with:
          ref: ${{ steps.env1.outputs.BRANCH_NAME }}

      - name: Checkout reusable workflow dir
        uses: actions/checkout@8ade135a41bc03ea155e62e844d188df1ea18608 # v4.1.0
        with:
          repository: ausaccessfed/workflows
          token: ${{ secrets.GITHUB_TOKEN }}
          # TODO: change back to main
          ref: feature/support-generic-containers
          path: .github/reusable_workflow

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ap-southeast-2
          role-to-assume: ${{ secrets.ROLE }}
          role-session-name: GithubActions-${{ inputs.ecr_repository }}-ci

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@2f9f10ea3fa2eed41ac443fee8bfbd059af2d0a4 # v1.6.0

      - name: set more envs
        id: env2
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          echo "ECR_REGISTRY=$ECR_REGISTRY" >> $GITHUB_OUTPUT
          echo "PUBLISH_APP_IMAGE_TAG=$ECR_REGISTRY/publish_app:latest" >> $GITHUB_OUTPUT
          echo "IMAGE_SCANNER_IMAGE_TAG=$ECR_REGISTRY/image-scanner:latest" >> $GITHUB_OUTPUT

          VERSION=$(${{ inputs.version_command }})
          BASE_IMAGE="${{ secrets.DOCKER_ECR }}ruby-base:${VERSION}"
          echo "BASE_IMAGE=$BASE_IMAGE" >> $GITHUB_OUTPUT

          # Strip git ref prefix from version
          IMAGE_ID=$(echo "$ECR_REGISTRY/${{ inputs.ecr_repository }}" | tr '[A-Z]' '[a-z]')
          echo "IMAGE_ID=$IMAGE_ID" >> $GITHUB_OUTPUT

          echo "PRODUCTION_IMAGE_TAG=$IMAGE_ID:${{ steps.env1.outputs.IMAGE_TAG }}" >> $GITHUB_OUTPUT

          echo "CACHE_IMAGE_TAG=$IMAGE_ID:cache" >> $GITHUB_OUTPUT

          # This is just a image tag without ecr to avoid ever grabbing from ecr
          echo "LOCAL_IMAGE_TAG=app:cache" >> $GITHUB_OUTPUT

          PROJECTS="${{ inputs.ecr_repository }}"
          if [ "${{ inputs.projects }}" != "" ]; then
            PROJECTS="${{ inputs.projects }}"
          fi
          echo "PROJECTS=$PROJECTS" >> $GITHUB_OUTPUT

          DEFAULT_BRANCH_FOR_CACHING="${{ inputs.default_branch_for_caching }}"
          if [ "$DEFAULT_BRANCH_FOR_CACHING" == "" ]; then
            DEFAULT_BRANCH_FOR_CACHING="${{ inputs.default_branch }}"
          fi
          echo "DEFAULT_BRANCH_FOR_CACHING=$DEFAULT_BRANCH_FOR_CACHING" >> $GITHUB_OUTPUT

          USE_BUILDX="false"
          if [ "${{ inputs.platforms }}" != "" ]; then
            USE_BUILDX="true"
          fi
          echo "USE_BUILDX=$USE_BUILDX" >> $GITHUB_OUTPUT

      - name: Set up QEMU
        if: steps.env2.outputs.USE_BUILDX == 'true'
        uses: docker/setup-qemu-action@27d0a4f181a40b142cce983c5393082c365d1480 # v1.2.0

      - name: Set up Docker Buildx
        if: steps.env2.outputs.USE_BUILDX == 'true'
        uses: docker/setup-buildx-action@f211e3e9ded2d9377c8cadc4489a4e38014bc4c9 # v1.7.0

      - name: Build Test OCI Image
        id: build-test
        run: |
          BUILD_TEST_COMMAND=""
          COMMON="--target development --build-arg BUILDKIT_INLINE_CACHE=1 --build-arg BASE_IMAGE=${{ steps.env2.outputs.BASE_IMAGE }}  --cache-from ${{ steps.env2.outputs.CACHE_IMAGE_TAG }} "

          if [ "${{ steps.env2.outputs.USE_BUILDX }}" == "true" ]; then
            BUILD_TEST_COMMAND="docker buildx build --platform=${{ inputs.platforms }} $COMMON -t ${{ steps.env2.outputs.CACHE_IMAGE_TAG }} -t ${{ steps.env2.outputs.LOCAL_IMAGE_TAG }} ."
          else
            docker pull ${{ steps.env2.outputs.CACHE_IMAGE_TAG }} || echo "true"
            BUILD_TEST_COMMAND="docker build $COMMON -t ${{ steps.env2.outputs.CACHE_IMAGE_TAG }} -t ${{ steps.env2.outputs.LOCAL_IMAGE_TAG }} ."
          fi

          BUILDX_PUSH_TEST_COMMAND="docker buildx build --push --platform=${{ inputs.platforms }} $COMMON -t ${{ steps.env2.outputs.CACHE_IMAGE_TAG }} ."
          echo "BUILDX_PUSH_TEST_COMMAND=$BUILDX_PUSH_TEST_COMMAND" >> $GITHUB_OUTPUT

          ## Note this is only needed as buildx doesnt support --load with multiple platforms yet but is on roadmap
          ## if it is ever supported simply remove this and the "Load test oci image step" and add --load to the first BUILD_TEST_COMMAND
          BUILDX_LOAD_TEST_COMMAND="docker buildx build --load $COMMON -t ${{ steps.env2.outputs.LOCAL_IMAGE_TAG }} ."
          echo "BUILDX_LOAD_TEST_COMMAND=$BUILDX_LOAD_TEST_COMMAND" >> $GITHUB_OUTPUT

          DOCKER_BUILDKIT=1 $BUILD_TEST_COMMAND

      - name: Load Test OCI Image
        if: steps.env2.outputs.USE_BUILDX == 'true'
        id: load-test
        run: $(${{ steps.build-test.outputs.BUILDX_LOAD_TEST_COMMAND }})

      - name: Build Production OCI Image and Run additional tasks
        id: build-production
        run: |
          BUILD_PRODUCTION_COMMAND=""
          COMMON="--target production --build-arg BUILDKIT_INLINE_CACHE=1 --build-arg RELEASE_VERSION=${{ steps.env1.outputs.IMAGE_TAG }} --build-arg BASE_IMAGE=${{ steps.env2.outputs.BASE_IMAGE }}  --cache-from ${{ steps.env2.outputs.CACHE_IMAGE_TAG }} -t ${{ steps.env2.outputs.PRODUCTION_IMAGE_TAG }}"
          if [ "${{ steps.env2.outputs.USE_BUILDX }}" == "true" ]; then
            BUILD_PRODUCTION_COMMAND="docker buildx build --platform=${{ inputs.platforms }} $COMMON ."
          else
            BUILD_PRODUCTION_COMMAND="docker build $COMMON ."
          fi

          BUILDX_PUSH_PRODUCTION_COMMAND="docker buildx build --push --platform=${{ inputs.platforms }} $COMMON ."
          echo "BUILDX_PUSH_PRODUCTION_COMMAND=$BUILDX_PUSH_PRODUCTION_COMMAND" >> $GITHUB_OUTPUT

          ## Note this is only needed as buildx doesnt support --load with multiple platforms yet but is on roadmap
          ## if it is ever supported simply remove this and the "Load test oci image step" and add --load to the first BUILD_TEST_COMMAND
          BUILDX_LOAD_PRODUCTION_COMMAND="docker buildx build --load $COMMON -t app:production ."
          echo "BUILDX_LOAD_PRODUCTION_COMMAND=$BUILDX_LOAD_PRODUCTION_COMMAND" >> $GITHUB_OUTPUT

          export BUILD_PRODUCTION_COMMAND="$BUILD_PRODUCTION_COMMAND"

          export EXTRA_TASK_INC=10
          # Make sure EXTRA_TASK_INC inc is greater than the amount of EXTRA_TASKS
          if [ "${{inputs.event_name}}" != "issue_comment" ]; then
            export EXTRA_TASK_1='${{ inputs.extra_task_1 }}'
            export EXTRA_TASK_2='${{ inputs.extra_task_2 }}'
            export EXTRA_TASK_3='${{ inputs.extra_task_3 }}'
            export EXTRA_TASK_4='${{ inputs.extra_task_4 }}'
            export EXTRA_TASK_5='${{ inputs.extra_task_5 }}'
            export EXTRA_TASK_6='${{ inputs.extra_task_6 }}'
          fi

          # must run as root to access the docker socket
          IMAGE_SCANNER_COMMON="docker run -u 0 -v /var/run/docker.sock:/var/run/docker.sock -v ${PWD}/Dockerfile:/app/Dockerfile ${{ steps.env2.outputs.IMAGE_SCANNER_IMAGE_TAG }}"
          echo "IMAGE_SCANNER_COMMON=$IMAGE_SCANNER_COMMON" >> $GITHUB_OUTPUT

          export EXTRA_TASK_IMAGE_LINT_COMMAND="$IMAGE_SCANNER_COMMON ./scripts/lint ${{ steps.env2.outputs.LOCAL_IMAGE_TAG }} /app/Dockerfile ${{ inputs.supress_task_failures }}"

          ./.github/reusable_workflow/scripts/additional_tasks.sh

      - name: Load Production OCI Image
        if: steps.env2.outputs.USE_BUILDX == 'true'
        id: load-production
        run: $(${{ steps.build-production.outputs.BUILDX_LOAD_PRODUCTION_COMMAND }})

      - name: Build Production Result
        id: build-production-result
        if: always()
        run: cat build.txt || (cat build_error.txt && exit 1)

      - name: ${{ inputs.extra_task_1_name }} Result
        id: extra-task-1
        if: inputs.event_name != 'issue_comment' && inputs.extra_task_1 != '' && always()
        env:
          NUMBER: 1
        run: cat task_${NUMBER}.txt || (cat task_${NUMBER}_error.txt && exit 1)

      - name: ${{ inputs.extra_task_2_name }} Result
        id: extra-task-2
        if: inputs.event_name != 'issue_comment' && inputs.extra_task_2 != '' && always()
        env:
          NUMBER: 2
        run: cat task_${NUMBER}.txt || (cat task_${NUMBER}_error.txt && exit 1)

      - name: ${{ inputs.extra_task_3_name }} Result
        id: extra-task-3
        if: inputs.event_name != 'issue_comment' && inputs.extra_task_3 != '' && always()
        env:
          NUMBER: 3
        run: cat task_${NUMBER}.txt || (cat task_${NUMBER}_error.txt && exit 1)

      - name: ${{ inputs.extra_task_4_name }} Result
        id: extra-task-4
        if: inputs.event_name != 'issue_comment' && inputs.extra_task_4 != '' && always()
        env:
          NUMBER: 4
        run: cat task_${NUMBER}.txt || (cat task_${NUMBER}_error.txt && exit 1)

      - name: ${{ inputs.extra_task_5_name }} Result
        id: extra-task-5
        if: inputs.event_name != 'issue_comment' && inputs.extra_task_5 != '' && always()
        env:
          NUMBER: 5
        run: cat task_${NUMBER}.txt || (cat task_${NUMBER}_error.txt && exit 1)

      - name: ${{ inputs.extra_task_6_name }} Result
        id: extra-task-6
        if: inputs.event_name != 'issue_comment' && inputs.extra_task_6 != '' && always()
        env:
          NUMBER: 6
        run: cat task_${NUMBER}.txt || (cat task_${NUMBER}_error.txt && exit 1)

      - name: Image lint results
        id: image-lint
        if: inputs.event_name != 'issue_comment' && always()
        run: cat image_lint.txt || (cat image_lint_error.txt && exit 1)

      # - name: Run Image scan on production image for cves
      #   if: inputs.event_name != 'issue_comment'
      #   run: |
      #     image_sha="$(docker images --no-trunc --quiet ${{ steps.env2.outputs.PRODUCTION_IMAGE_TAG }})"
      #     ${{ steps.build-production.outputs.IMAGE_SCANNER_COMMON }} \
      #       ./scripts/scan \
      #       ${{ steps.env2.outputs.PRODUCTION_IMAGE_TAG }} \
      #       $image_sha \
      #       /app/Dockerfile \
      #       ${{ secrets.SNYK_TOKEN }} \
      #       ${{ inputs.supress_task_failures }}

      - name: Push to ECR
        run: |
          if [ \
              "${{inputs.event_name}}" == "push" -a "${{steps.env1.outputs.BRANCH_NAME}}" == "${{inputs.default_branch}}" \
              -o \
              "${{inputs.event_name}}" == "issue_comment" \
              -o \
              "${{steps.env1.outputs.BRANCH_NAME}}" == "${{inputs.default_develop_branch}}" -a "${{inputs.event_name}}" == "push" \
            ]; then
            if [ "${{ steps.env2.outputs.USE_BUILDX }}" == "true" ]; then
              export PRODUCTION_PUSH_COMMAND="${{ steps.build-production.outputs.BUILDX_PUSH_PRODUCTION_COMMAND }}"
            else 
              export PRODUCTION_PUSH_COMMAND="docker push ${{ steps.env2.outputs.PRODUCTION_IMAGE_TAG }}"
            fi
          fi

          if [ "${{inputs.event_name}}" == "push" ] && [ "${{steps.env1.outputs.BRANCH_NAME}}" == "${{steps.env2.outputs.DEFAULT_BRANCH_FOR_CACHING}}" ]; then
            if [ "${{ steps.env2.outputs.USE_BUILDX }}" == "true" ]; then
              export CACHE_PUSH_COMMAND="${{ steps.build-test.outputs.BUILDX_PUSH_TEST_COMMAND }}"
            else
              export CACHE_PUSH_COMMAND="docker push ${{ steps.env2.outputs.CACHE_IMAGE_TAG }}"
            fi
          fi
          ./.github/reusable_workflow/scripts/push_images.sh

          if [ \
              "${{inputs.event_name}}" == "push" -a "${{steps.env1.outputs.BRANCH_NAME}}" == "${{inputs.default_branch}}" \
              -o \
              "${{inputs.event_name}}" == "issue_comment" \
              -o \
              "${{steps.env1.outputs.BRANCH_NAME}}" == "${{inputs.default_develop_branch}}" -a "${{inputs.event_name}}" == "push" \
            ]; then
              cat push_production.txt
              [[ -f push_production_error.txt ]] && cat push_production_error.txt && exit 1 || echo ""
          fi
          if [ "${{inputs.event_name}}" == "push" ] && [ "${{steps.env1.outputs.BRANCH_NAME}}" == "${{steps.env2.outputs.DEFAULT_BRANCH_FOR_CACHING}}" ]; then
            cat push_cache.txt 
            [[ -f push_cache_error.txt ]] && cat push_cache_error.txt && exit 1 || echo ""
          fi

      ## no point making the gitops repo triggers async, they will fight each other
      ## and usually only 1 if statement is called anyway
      - name: Update GitOps Repo to trigger deploys
        if: |
          inputs.production_environments != '' && 
          steps.env1.outputs.BRANCH_NAME == inputs.default_branch && 
          inputs.event_name == 'push'
        run: |
          printenv > .envs
           docker run --env-file .envs \
           -e PROJECTS="${{ steps.env2.outputs.PROJECTS }}" \
           -e IMAGE_TAG=${{ steps.env1.outputs.IMAGE_TAG }} \
           -e ENVIRONMENTS="${{ inputs.production_environments }}" \
           -e ECR_REPOSITORY="${{ inputs.ecr_repository }}" \
           ${{ steps.env2.outputs.PUBLISH_APP_IMAGE_TAG }}

      - name: Update GitOps Repo to trigger deploys for test
        if: |
          inputs.test_environments != '' && 
          steps.env1.outputs.BRANCH_NAME == inputs.default_develop_branch && 
          inputs.event_name == 'push'
        run: |
          printenv > .envs
           docker run --env-file .envs \
           -e PROJECTS="${{ steps.env2.outputs.PROJECTS }}" \
           -e IMAGE_TAG=${{ steps.env1.outputs.IMAGE_TAG }} \
           -e ENVIRONMENTS="${{ inputs.test_environments }}" \
           -e ECR_REPOSITORY="${{ inputs.ecr_repository }}" \
           ${{ steps.env2.outputs.PUBLISH_APP_IMAGE_TAG }}

      - name: Update GitOps Repo to trigger deploys for development
        if: |
          inputs.development_environments != '' &&
          inputs.event_name == 'issue_comment'
        run: |
          printenv > .envs
           docker run --env-file .envs \
           -e PROJECTS="${{ steps.env2.outputs.PROJECTS }}" \
           -e IMAGE_TAG=${{ steps.env1.outputs.IMAGE_TAG }} \
           -e ENVIRONMENTS="${{ inputs.development_environments }}" \
           -e ECR_REPOSITORY="${{ inputs.ecr_repository }}" \
           ${{ steps.env2.outputs.PUBLISH_APP_IMAGE_TAG }}

      - name: check for failures
        id: failure-check
        if: inputs.event_name == 'issue_comment' && always()
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          output=
          status="failure"
          url="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

          if [ "${{ steps.build-test.outcome }}" == "failure" ]; then 
            output="${output}Building the Test image has failed! "
          fi

          if [ "${{ steps.build-production-result.outcome }}" == "failure" ]; then 
            output="${output}Building the Production image has failed!"
          fi

          if [ "$output" == "" ]; then 
            output="Manifest updated, Deploying to ${{ inputs.dev_url }} (may take up to 5 minutes)"
            status="success"
            url="${{ inputs.dev_url }}"
          fi
          echo "ADHOC_OUTPUT=$output" >> $GITHUB_OUTPUT
          echo "ADHOC_STATUS=$status" >> $GITHUB_OUTPUT
          echo "ADHOC_URL=$url" >> $GITHUB_OUTPUT
          if [ "${{ inputs.event_comment_id }}" != "" ]; then
            gh api \
              --method DELETE \
              -H "Accept: application/vnd.github+json" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              /repos/ausaccessfed/${{ inputs.ecr_repository }}/issues/comments/${{ inputs.event_comment_id }}
          fi

      - name: Set final commit status
        if: inputs.event_name == 'issue_comment' && always()
        uses: myrotvorets/set-commit-status-action@38f3f27c7d52fb381273e95542f07f0fba301307 # v2.0.0
        with:
          sha: ${{ steps.comment-branch.outputs.head_sha }}
          token: ${{ secrets.GITHUB_TOKEN }}
          status: ${{ steps.failure-check.outputs.ADHOC_STATUS }}
          targetUrl: ${{ steps.failure-check.outputs.ADHOC_URL }}
          description: ${{ steps.failure-check.outputs.ADHOC_OUTPUT }}
          context: "Dev federation deploy"
