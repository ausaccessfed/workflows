name: Build Docker Image
on:
  workflow_call:
    inputs:
      ecr_repository:
        required: true
        type: string
      dev_url:
        default: ''
        type: string
      event_name:
        required: true
        type: string
      event_comment_body:
        default: ''
        type: string
      event_comment_id:
        default: ''
        type: string
      default_branch:
        default: 'master'
        type: string
      ## if not set defaults to default_branch
      default_branch_for_caching:
        default: ''
        type: string
      ## if not set defaults to default_branch
      default_develop_branch:
        default: ''
        type: string
      version_command:
        default: 'cat .ruby-version'
        type: string
      ## used to allow for custom "latest" tags i.e ruby-base so we can tag with 3.2.2 or 3.3
      latest_image_tag:
        default: 'latest'
        type: string
      ## If set to '' then service will not be started
      mysql_image_tag_version:
        default: '8'
        type: string
      ## if not set defaults to ecr_repository
      projects:
        default: ''
        type: string
      platforms:
        default: "['linux/amd64']"
        type: string
      # TODO: once we remove this arg from flow, make it the first used as an override
      # Or we jsut drop it entirly?
      runner:
        default: 'ubuntu-latest'
        type: string
      development_environments:
        default: 'development'
        type: string
      test_environments:
        default: ''
        type: string
      production_environments:
        default: 'test,production'
        type: string
      save_test_artifacts:
        default: false
        type: boolean
      extra_task_1_name:
        default: 'N/A'
        type: string
      extra_task_1:
        default: ''
        type: string
      extra_task_2_name:
        default: 'N/A'
        type: string
      extra_task_2:
        default: ''
        type: string
      extra_task_3_name:
        default: 'N/A'
        type: string
      extra_task_3:
        default: ''
        type: string
      extra_task_4_name:
        default: 'N/A'
        type: string
      extra_task_4:
        default: ''
        type: string
      extra_task_5_name:
        default: 'N/A'
        type: string
      extra_task_5:
        default: ''
        type: string
      extra_task_6_name:
        default: 'N/A'
        type: string
      extra_task_6:
        default: ''
        type: string
      extra_task_7_name:
        default: 'N/A'
        type: string
      extra_task_7:
        default: ''
        type: string
      extra_task_8_name:
        default: 'N/A'
        type: string
      extra_task_8:
        default: ''
        type: string
      extra_task_9_name:
        default: 'N/A'
        type: string
      extra_task_9:
        default: ''
        type: string
      extra_task_10_name:
        default: 'N/A'
        type: string
      extra_task_10:
        default: ''
        type: string
    secrets:
      ROLE:
        required: true
      SNYK_TOKEN:
        required: true
jobs:
  init:
    outputs:
      head_sha: ${{ steps.comment-branch.outputs.head_sha }}
      IS_SLASH_DEPLOY: ${{ steps.env.outputs.IS_SLASH_DEPLOY }}
      PUBLISH_APP_IMAGE_ID_TAG: ${{ steps.env.outputs.PUBLISH_APP_IMAGE_ID_TAG }}
      IMAGE_TAG: ${{ steps.env.outputs.IMAGE_TAG }}
      PROJECTS: ${{ steps.env.outputs.PROJECTS }}
      IS_DEFAULT_DEVELOPMENT_BRANCH_PUSH: ${{ steps.env.outputs.IS_DEFAULT_DEVELOPMENT_BRANCH_PUSH }}
      IS_MONTHLY_BUILD: ${{ steps.env.outputs.IS_MONTHLY_BUILD }}
      IS_DEFAULT_BRANCH_PUSH: ${{ steps.env.outputs.IS_DEFAULT_BRANCH_PUSH }}
      BRANCH_NAME: ${{ steps.branch.outputs.BRANCH_NAME }}
      CACHE_IMAGE_ID_TAG: ${{ steps.env.outputs.CACHE_IMAGE_ID_TAG }}
      RUBY_VERSION: ${{ steps.env.outputs.RUBY_VERSION }}
      LOCAL_CACHE_IMAGE_ID_TAG: ${{ steps.env.outputs.LOCAL_CACHE_IMAGE_ID_TAG }}
      BASE_IMAGE: ${{ steps.env.outputs.BASE_IMAGE }}
      PRODUCTION_IMAGE_ID_TAG: ${{ steps.env.outputs.PRODUCTION_IMAGE_ID_TAG }}
      LATEST_IMAGE_ID_TAG: ${{ steps.env.outputs.LATEST_IMAGE_ID_TAG }}
      IMAGE_SCANNER_IMAGE_ID_TAG: ${{ steps.env.outputs.IMAGE_SCANNER_IMAGE_ID_TAG }}
      SHOULD_PUSH_IMAGE_TO_ECR: ${{ steps.env.outputs.SHOULD_PUSH_IMAGE_TO_ECR }}
      IS_DEFAULT_CACHE_BRANCH_PUSH: ${{ steps.env.outputs.IS_DEFAULT_CACHE_BRANCH_PUSH }}
    name: init
    runs-on: ubuntu-latest
    if: inputs.event_name != 'issue_comment' || (contains(inputs.event_comment_body, '/deploy')  && contains(fromJSON(vars.ALLOWED_ACTORS), github.event.comment.user.login))
    steps:
      - uses: xt0rted/pull-request-comment-branch@d97294d304604fa98a2600a6e2f916a84b596dc7 # v2.0.0
        if: inputs.event_name == 'issue_comment'
        id: comment-branch

      - name: Set commit status as pending
        uses: myrotvorets/set-commit-status-action@3730c0a348a2ace3c110851bed53331bc6406e9f # v2.0.1
        if: inputs.event_name == 'issue_comment'
        with:
          sha: ${{ steps.comment-branch.outputs.head_sha }}
          token: ${{ secrets.GITHUB_TOKEN }}
          status: pending
          description: 'testing, building and pushing image'
          context: 'Dev federation deploy'

      - id: branch
        name: set envs
        run: |
          ## PR comment branch || pr branch || default branch
          if [ "${{ steps.comment-branch.outputs.head_ref }}" != "" ]; then
            BRANCH_NAME="${{ steps.comment-branch.outputs.head_ref }}"
          elif [ "${{ github.head_ref }}" != "" ]; then
            BRANCH_NAME="${{ github.head_ref }}"
          else
            BRANCH_NAME="${{ github.ref_name }}"
          fi
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_OUTPUT

      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          ref: ${{ steps.branch.outputs.BRANCH_NAME }}

      - name: Checkout reusable workflow dir
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          repository: ausaccessfed/workflows
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: main
          path: .github/reusable_workflow

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502 # v4.0.2
        with:
          aws-region: ap-southeast-2
          role-to-assume: ${{ secrets.ROLE }}
          role-session-name: GithubActions-${{ inputs.ecr_repository }}-ci
          mask-aws-account-id: 'false'

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@062b18b96a7aff071d4dc91bc00c4c1a7945b076 # v2.0.1
        with:
          mask-password: 'false'

      - name: set more envs
        id: env
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          IS_SLASH_DEPLOY=$([ "${{ inputs.event_name }}" == "issue_comment" ] && echo "true" || echo "false")
          echo "IS_SLASH_DEPLOY=$IS_SLASH_DEPLOY" >> $GITHUB_OUTPUT

          IS_MONTHLY_BUILD=$([ "${{ inputs.event_name }}" == "schedule" ] && echo "true" || echo "false")
          echo "IS_MONTHLY_BUILD=$IS_MONTHLY_BUILD" >> $GITHUB_OUTPUT

          IS_DEFAULT_BRANCH_PUSH=$(([ "${{ inputs.event_name }}" == "push" ] && [ "${{steps.branch.outputs.BRANCH_NAME}}" == "${{ inputs.default_branch }}" ]) && echo "true" || echo "false")
          echo "IS_DEFAULT_BRANCH_PUSH=$IS_DEFAULT_BRANCH_PUSH" >> $GITHUB_OUTPUT

          IS_DEFAULT_DEVELOPMENT_BRANCH_PUSH=$(([ "${{ inputs.event_name }}" == "push" ] && [ "${{steps.branch.outputs.BRANCH_NAME}}" == "${{ inputs.default_develop_branch }}" ]) && echo "true" || echo "false")
          echo "IS_DEFAULT_DEVELOPMENT_BRANCH_PUSH=$IS_DEFAULT_DEVELOPMENT_BRANCH_PUSH" >> $GITHUB_OUTPUT

          DEFAULT_BRANCH_FOR_CACHING=$([ "${{ inputs.default_branch_for_caching }}" == "" ] && echo "${{ inputs.default_branch }}" || echo "${{ inputs.default_branch_for_caching }}")
          IS_DEFAULT_CACHE_BRANCH_PUSH=$(([ "${{ inputs.event_name }}" == "push" ] && [ "${{steps.branch.outputs.BRANCH_NAME}}" == "$DEFAULT_BRANCH_FOR_CACHING" ]) && echo "true" || echo "false")
          echo "IS_DEFAULT_CACHE_BRANCH_PUSH=$IS_DEFAULT_CACHE_BRANCH_PUSH" >> $GITHUB_OUTPUT

          if [ "$IS_SLASH_DEPLOY" == "true" ]; then
            IMAGE_TAG=adhoc-${{steps.comment-branch.outputs.head_ref}}-${{steps.comment-branch.outputs.head_sha}}
          else
            IMAGE_TAG=stable-${{ github.sha }}
          fi
          IMAGE_TAG=$(echo "$IMAGE_TAG" | tr / _)
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_OUTPUT

          SHOULD_PUSH_IMAGE_TO_ECR=$([ \
            "$IS_DEFAULT_BRANCH_PUSH" == "true" \
            -o \
            "$IS_SLASH_DEPLOY" == "true" \
            -o \
            "$IS_DEFAULT_DEVELOPMENT_BRANCH_PUSH" == "true" \
            -o \
            "$IS_MONTHLY_BUILD" == "true" \
          ] && echo "true" || echo "false")
          echo "SHOULD_PUSH_IMAGE_TO_ECR=$SHOULD_PUSH_IMAGE_TO_ECR" >> $GITHUB_OUTPUT

          echo "ECR_REGISTRY=$ECR_REGISTRY" >> $GITHUB_OUTPUT
          echo "PUBLISH_APP_IMAGE_ID_TAG=$ECR_REGISTRY/publish_app:latest" >> $GITHUB_OUTPUT
          echo "IMAGE_SCANNER_IMAGE_ID_TAG=$ECR_REGISTRY/image-scanner:latest" >> $GITHUB_OUTPUT

          RUBY_VERSION=$(${{ inputs.version_command }})
          echo "RUBY_VERSION=$RUBY_VERSION" >> $GITHUB_OUTPUT
          BASE_IMAGE="$ECR_REGISTRY/ruby-base:${RUBY_VERSION}"
          echo "BASE_IMAGE=$BASE_IMAGE" >> $GITHUB_OUTPUT

          # Strip git ref prefix from version
          IMAGE_ID=$(echo "$ECR_REGISTRY/${{ inputs.ecr_repository }}" | tr '[A-Z]' '[a-z]')

          echo "IMAGE_ID=$IMAGE_ID" >> $GITHUB_OUTPUT

          echo "PRODUCTION_IMAGE_ID_TAG=$IMAGE_ID:$IMAGE_TAG" >> $GITHUB_OUTPUT

          echo "LATEST_IMAGE_ID_TAG=$IMAGE_ID:${{ inputs.latest_image_tag }}" >> $GITHUB_OUTPUT

          echo "CACHE_IMAGE_ID_TAG=$IMAGE_ID:cache" >> $GITHUB_OUTPUT

          # This is just a image tag without ecr to avoid ever grabbing from ecr
          echo "LOCAL_CACHE_IMAGE_ID_TAG=app:cache" >> $GITHUB_OUTPUT

          PROJECTS="${{ inputs.ecr_repository }}"
          if [ "${{ inputs.projects }}" != "" ]; then
            PROJECTS="${{ inputs.projects }}"
          fi
          echo "PROJECTS=$PROJECTS" >> $GITHUB_OUTPUT

  run:
    outputs:
      ADHOC_OUTPUT: ${{ steps.failure-check.outputs.ADHOC_OUTPUT }}
      ADHOC_URL: ${{ steps.failure-check.outputs.ADHOC_URL }}
      ADHOC_STATUS: ${{ steps.failure-check.outputs.ADHOC_STATUS }}
    needs: [init]
    strategy:
      matrix:
        arch: ${{ fromJSON(inputs.platforms) }}
    runs-on: ${{ (matrix.arch == 'linux/amd64' && 'ubuntu-latest') || (matrix.arch == 'linux/arm64' && 'arm64-4core') }}
    name: run
    services:
      mysql:
        image: ${{ ( inputs.mysql_image_tag_version != '' ) && format('mysql:{0}', inputs.mysql_image_tag_version) || '' }}
        env:
          MYSQL_ROOT_PASSWORD: password
        ports:
          - '3306:3306'
    steps:
      - name: Delete huge unnecessary tools folder
        run: rm -rf /opt/hostedtoolcache

      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          ref: ${{ needs.init.outputs.BRANCH_NAME }}

      - name: Checkout reusable workflow dir
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          repository: ausaccessfed/workflows
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: main
          path: .github/reusable_workflow

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502 # v4.0.2
        with:
          aws-region: ap-southeast-2
          role-to-assume: ${{ secrets.ROLE }}
          role-session-name: GithubActions-${{ inputs.ecr_repository }}-ci

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@062b18b96a7aff071d4dc91bc00c4c1a7945b076 # v2.0.1

      - name: Force docker image to be rebuilt from scratch
        if: inputs.event_name == 'schedule'
        run: |
          echo "`date "+%Y-%m-%d %H:%M:%S"` REBUILD" >> .FORCE_NEW_DOCKER_BUILD

      - name: Set up QEMU
        uses: docker/setup-qemu-action@5927c834f5b4fdf503fca6f4c7eccda82949e1ee # v3.1.0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@4fd812986e6c8c2a69e18311145f9371337f27d4 # v3.4.0

      - name: Build Test OCI Image
        id: build-test
        run: |
          COMMON="docker buildx build --platform=${{ matrix.arch }} --target development --build-arg BUILDKIT_INLINE_CACHE=1 --build-arg RUBY_VERSION=${{ needs.init.outputs.RUBY_VERSION }} --build-arg BASE_IMAGE=${{ needs.init.outputs.BASE_IMAGE }}  --cache-from ${{ needs.init.outputs.CACHE_IMAGE_ID_TAG }} "

          BUILD_TEST_COMMAND="$COMMON --load -t ${{ needs.init.outputs.CACHE_IMAGE_ID_TAG }} -t ${{ needs.init.outputs.LOCAL_CACHE_IMAGE_ID_TAG }} ."
          BUILD_PUSH_TEST_COMMAND="$COMMON --push  -t ${{ needs.init.outputs.CACHE_IMAGE_ID_TAG }} ."

          echo "BUILD_PUSH_TEST_COMMAND=$BUILD_PUSH_TEST_COMMAND" >> $GITHUB_OUTPUT

          DOCKER_BUILDKIT=1 $BUILD_TEST_COMMAND

      - name: Build Production OCI Image and Run additional tasks
        id: build-production
        run: |
          COMMON="docker buildx build --platform=${{ matrix.arch }} --target production --build-arg BUILDKIT_INLINE_CACHE=1 --build-arg RUBY_VERSION=${{ needs.init.outputs.RUBY_VERSION }} --build-arg RELEASE_VERSION=${{ needs.init.outputs.IMAGE_TAG }} --build-arg BASE_IMAGE=${{ needs.init.outputs.BASE_IMAGE }}  --cache-from ${{ needs.init.outputs.CACHE_IMAGE_ID_TAG }} -t ${{ needs.init.outputs.PRODUCTION_IMAGE_ID_TAG }} -t ${{ needs.init.outputs.LATEST_IMAGE_ID_TAG }}"

          BUILD_PRODUCTION_COMMAND="$COMMON --load ."
          BUILD_PUSH_PRODUCTION_COMMAND="$COMMON --push ."

          echo "BUILD_PUSH_PRODUCTION_COMMAND=$BUILD_PUSH_PRODUCTION_COMMAND" >> $GITHUB_OUTPUT

          export BUILD_PRODUCTION_COMMAND="$BUILD_PRODUCTION_COMMAND"

          export EXTRA_TASK_INC=10
          # Make sure EXTRA_TASK_INC inc is greater than the amount of EXTRA_TASKS
          if [ "${{needs.init.outputs.IS_SLASH_DEPLOY}}" == "false" ]; then
            export EXTRA_TASK_1='${{ inputs.extra_task_1 }}'
            export EXTRA_TASK_2='${{ inputs.extra_task_2 }}'
            export EXTRA_TASK_3='${{ inputs.extra_task_3 }}'
            export EXTRA_TASK_4='${{ inputs.extra_task_4 }}'
            export EXTRA_TASK_5='${{ inputs.extra_task_5 }}'
            export EXTRA_TASK_6='${{ inputs.extra_task_6 }}'
            export EXTRA_TASK_7='${{ inputs.extra_task_7 }}'
            export EXTRA_TASK_8='${{ inputs.extra_task_8 }}'
            export EXTRA_TASK_9='${{ inputs.extra_task_9 }}'
            export EXTRA_TASK_10='${{ inputs.extra_task_10 }}'
          fi

          IMAGE_SCANNER_EXTRAS=""
          if [ -f "${PWD}/Dockerfile" ]; then
            IMAGE_SCANNER_EXTRAS="-v ${PWD}/Dockerfile:/app/Dockerfile ${IMAGE_SCANNER_EXTRAS}"
          fi
          if [ -f "${PWD}/.dockleignore" ]; then
            IMAGE_SCANNER_EXTRAS="-v ${PWD}/.dockleignore:/app/.dockleignore ${IMAGE_SCANNER_EXTRAS}"
          fi
          if [ -f "${PWD}/.hadolint.yaml" ]; then
            IMAGE_SCANNER_EXTRAS="-v ${PWD}/.hadolint.yaml:/app/.hadolint.yaml ${IMAGE_SCANNER_EXTRAS}"
          fi

          # must run as root to access the docker socket
          IMAGE_SCANNER_COMMON="docker run -u 0 -v /var/run/docker.sock:/var/run/docker.sock ${IMAGE_SCANNER_EXTRAS} ${{ needs.init.outputs.IMAGE_SCANNER_IMAGE_ID_TAG }}"
          echo "IMAGE_SCANNER_COMMON=$IMAGE_SCANNER_COMMON" >> $GITHUB_OUTPUT

          ./.github/reusable_workflow/scripts/additional_tasks.sh

      - name: Build Production Result
        id: build-production-result
        if: always()
        run: |
          cat build.txt || echo "no output"
          if [ -f build_error.txt ]; then
            cat build_error.txt.txt
            exit 1
          fi
      - name: ${{ inputs.extra_task_1_name }} Result
        id: extra-task-1
        if: needs.init.outputs.IS_SLASH_DEPLOY == 'false' && inputs.extra_task_1 != '' && always()
        env:
          NUMBER: 1
        run: |
          cat task_${NUMBER}.txt || echo "no output"
          if [ -f task_${NUMBER}_error.txt ]; then
            cat task_${NUMBER}_error.txt
            exit 1
          fi
      - name: ${{ inputs.extra_task_2_name }} Result
        id: extra-task-2
        if: needs.init.outputs.IS_SLASH_DEPLOY == 'false' && inputs.extra_task_2 != '' && always()
        env:
          NUMBER: 2
        run: |
          cat task_${NUMBER}.txt || echo "no output"
          if [ -f task_${NUMBER}_error.txt ]; then
            cat task_${NUMBER}_error.txt
            exit 1
          fi
      - name: ${{ inputs.extra_task_3_name }} Result
        id: extra-task-3
        if: needs.init.outputs.IS_SLASH_DEPLOY == 'false' && inputs.extra_task_3 != '' && always()
        env:
          NUMBER: 3
        run: |
          cat task_${NUMBER}.txt || echo "no output"
          if [ -f task_${NUMBER}_error.txt ]; then
            cat task_${NUMBER}_error.txt
            exit 1
          fi
      - name: ${{ inputs.extra_task_4_name }} Result
        id: extra-task-4
        if: needs.init.outputs.IS_SLASH_DEPLOY == 'false' && inputs.extra_task_4 != '' && always()
        env:
          NUMBER: 4
        run: |
          cat task_${NUMBER}.txt || echo "no output"
          if [ -f task_${NUMBER}_error.txt ]; then
            cat task_${NUMBER}_error.txt
            exit 1
          fi
      - name: ${{ inputs.extra_task_5_name }} Result
        id: extra-task-5
        if: needs.init.outputs.IS_SLASH_DEPLOY == 'false' && inputs.extra_task_5 != '' && always()
        env:
          NUMBER: 5
        run: |
          cat task_${NUMBER}.txt || echo "no output"
          if [ -f task_${NUMBER}_error.txt ]; then
            cat task_${NUMBER}_error.txt
            exit 1
          fi
      - name: ${{ inputs.extra_task_6_name }} Result
        id: extra-task-6
        if: needs.init.outputs.IS_SLASH_DEPLOY == 'false' && inputs.extra_task_6 != '' && always()
        env:
          NUMBER: 6
        run: |
          cat task_${NUMBER}.txt || echo "no output"
          if [ -f task_${NUMBER}_error.txt ]; then
            cat task_${NUMBER}_error.txt
            exit 1
          fi
      - name: ${{ inputs.extra_task_7_name }} Result
        id: extra-task-7
        if: needs.init.outputs.IS_SLASH_DEPLOY == 'false' && inputs.extra_task_7 != '' && always()
        env:
          NUMBER: 7
        run: |
          cat task_${NUMBER}.txt || echo "no output"
          if [ -f task_${NUMBER}_error.txt ]; then
            cat task_${NUMBER}_error.txt
            exit 1
          fi
      - name: ${{ inputs.extra_task_8_name }} Result
        id: extra-task-8
        if: needs.init.outputs.IS_SLASH_DEPLOY == 'false' && inputs.extra_task_8 != '' && always()
        env:
          NUMBER: 8
        run: |
          cat task_${NUMBER}.txt || echo "no output"
          if [ -f task_${NUMBER}_error.txt ]; then
            cat task_${NUMBER}_error.txt
            exit 1
          fi
      - name: ${{ inputs.extra_task_9_name }} Result
        id: extra-task-9
        if: needs.init.outputs.IS_SLASH_DEPLOY == 'false' && inputs.extra_task_9 != '' && always()
        env:
          NUMBER: 9
        run: |
          cat task_${NUMBER}.txt || echo "no output"
          if [ -f task_${NUMBER}_error.txt ]; then
            cat task_${NUMBER}_error.txt
            exit 1
          fi
      - name: ${{ inputs.extra_task_10_name }} Result
        id: extra-task-10
        if: needs.init.outputs.IS_SLASH_DEPLOY == 'false' && inputs.extra_task_10 != '' && always()
        env:
          NUMBER: 10
        run: |
          cat task_${NUMBER}.txt || echo "no output"
          if [ -f task_${NUMBER}_error.txt ]; then
            cat task_${NUMBER}_error.txt
            exit 1
          fi

      - name: zip artifacts
        if: always() && needs.init.outputs.IS_DEFAULT_BRANCH_PUSH != 'true' && inputs.save_test_artifacts
        #  TODO: adjust this to support more than 1 folder at some point (getting capybara/puppeteer results for now)
        # TODO: for now it assumes the test run will mount /tmp/screenshots (see puppeteer for example)
        run: |
          zip -r screenshots.zip /tmp/screenshots
      - uses: actions/upload-artifact@0b2256b8c012f0828dc542b3febcab082c67f72b # v4.3.4
        if: always() && needs.init.outputs.IS_DEFAULT_BRANCH_PUSH != 'true' && inputs.save_test_artifacts
        with:
          name: failed_images
          path: screenshots.zip

      #  TODO: this is breaking due to docker updates and it never looking localy for images???
      # - name: Run Image lint on production image
      #   run: |
      #     ${{ steps.build-production.outputs.IMAGE_SCANNER_COMMON }} \
      #       ./scripts/lint \
      #       ${{ needs.init.outputs.SIMPLE_PRODUCTION_IMAGE_ID_TAG }} \
      #       /app/Dockerfile

      - name: Run Image scan on production image for cves
        run: |
          IMAGE_SHA="$(docker images --no-trunc --quiet ${{ needs.init.outputs.PRODUCTION_IMAGE_ID_TAG }})"
          ${{ steps.build-production.outputs.IMAGE_SCANNER_COMMON }} \
            ./scripts/scan \
            ${{ needs.init.outputs.PRODUCTION_IMAGE_ID_TAG }} \
            $IMAGE_SHA \
            /app/Dockerfile \
            ${{ secrets.SNYK_TOKEN }} \
            true

      - name: Push to ECR
        if: needs.init.outputs.SHOULD_PUSH_IMAGE_TO_ECR == 'true'
        run: |
          export PRODUCTION_PUSH_COMMAND="${{ steps.build-production.outputs.BUILD_PUSH_PRODUCTION_COMMAND }}"
          export PRODUCTION_LATEST_PUSH_COMMAND="echo 'BUILDX doesnt do anything here'"

          if [ "${{needs.init.outputs.IS_DEFAULT_CACHE_BRANCH_PUSH}}" == "true" ]; then
            export CACHE_PUSH_COMMAND="${{ steps.build-test.outputs.BUILD_PUSH_TEST_COMMAND }}"
          fi

          ./.github/reusable_workflow/scripts/push_images.sh

          cat push_production.txt || echo "no output"
          if [ -f push_production_error.txt ]; then
            cat push_production_error.txt
            exit 1
          fi

          cat push_production_latest.txt || echo "no output"
          if [ -f push_production_latest_error.txt ]; then
            cat push_production_latest_error.txt
            exit 1
          fi

          if [ "${{needs.init.outputs.IS_DEFAULT_CACHE_BRANCH_PUSH}}" == "true" ]; then
            cat push_cache.txt || echo "no output"
            if [ -f push_cache_error.txt ]; then
              cat push_cache_error.txt
              exit 1
            fi
          fi

      - name: check for failures
        id: failure-check
        if: needs.init.outputs.IS_SLASH_DEPLOY == 'true' && always()
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          OUTPUT=
          STATUS="failure"
          URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

          if [ "${{ steps.build-test.outcome }}" == "failure" ]; then
            OUTPUT="${OUTPUT}Building the Test image has failed! "
          fi

          if [ "${{ steps.build-production-result.outcome }}" == "failure" ]; then
            OUTPUT="${OUTPUT}Building the Production image has failed!"
          fi

          if [ "$OUTPUT" == "" ]; then
            OUTPUT="Manifest updated, Deploying to ${{ inputs.dev_url }} (may take up to 5 minutes)"
            STATUS="success"
            URL="${{ inputs.dev_url }}"
          fi
          echo "ADHOC_OUTPUT=$OUTPUT" >> $GITHUB_OUTPUT
          echo "ADHOC_STATUS=$STATUS" >> $GITHUB_OUTPUT
          echo "ADHOC_URL=$URL" >> $GITHUB_OUTPUT
          if [ "${{ inputs.event_comment_id }}" != "" ]; then
            gh api \
              --method DELETE \
              -H "Accept: application/vnd.github+json" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              /repos/ausaccessfed/${{ inputs.ecr_repository }}/issues/comments/${{ inputs.event_comment_id }}
          fi

  finish:
    needs: [run, init]
    name: 'finish'
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502 # v4.0.2
        with:
          aws-region: ap-southeast-2
          role-to-assume: ${{ secrets.ROLE }}
          role-session-name: GithubActions-${{ inputs.ecr_repository }}-ci

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@062b18b96a7aff071d4dc91bc00c4c1a7945b076 # v2.0.1

      ## no point making the gitops repo triggers async, they will fight each other
      ## and usually only 1 if statement is called anyway
      - name: Update GitOps Repo to trigger deploys
        if: inputs.production_environments != '' && (needs.init.outputs.IS_DEFAULT_BRANCH_PUSH == 'true' || needs.init.outputs.IS_MONTHLY_BUILD == 'true')
        run: |
          printenv > .envs
           docker run --env-file .envs \
           -e PROJECTS="${{ needs.init.outputs.PROJECTS }}" \
           -e IMAGE_TAG=${{ needs.init.outputs.IMAGE_TAG }} \
           -e ENVIRONMENTS="${{ inputs.production_environments }}" \
           -e ECR_REPOSITORY="${{ inputs.ecr_repository }}" \
           ${{ needs.init.outputs.PUBLISH_APP_IMAGE_ID_TAG }}

      - name: Update GitOps Repo to trigger deploys for test
        if: inputs.test_environments != '' && needs.init.outputs.IS_DEFAULT_DEVELOPMENT_BRANCH_PUSH == 'true'
        run: |
          printenv > .envs
           docker run --env-file .envs \
           -e PROJECTS="${{ needs.init.outputs.PROJECTS }}" \
           -e IMAGE_TAG=${{ needs.init.outputs.IMAGE_TAG }} \
           -e ENVIRONMENTS="${{ inputs.test_environments }}" \
           -e ECR_REPOSITORY="${{ inputs.ecr_repository }}" \
           ${{ needs.init.outputs.PUBLISH_APP_IMAGE_ID_TAG }}

      - name: Update GitOps Repo to trigger deploys for development
        if: inputs.development_environments != '' && needs.init.outputs.IS_SLASH_DEPLOY == 'true'
        run: |
          printenv > .envs
           docker run --env-file .envs \
           -e PROJECTS="${{ needs.init.outputs.PROJECTS }}" \
           -e IMAGE_TAG=${{ needs.init.outputs.IMAGE_TAG }} \
           -e ENVIRONMENTS="${{ inputs.development_environments }}" \
           -e ECR_REPOSITORY="${{ inputs.ecr_repository }}" \
           ${{ needs.init.outputs.PUBLISH_APP_IMAGE_ID_TAG }}

      - name: Set final commit status
        if: needs.init.outputs.IS_SLASH_DEPLOY == 'true' && always()
        uses: myrotvorets/set-commit-status-action@3730c0a348a2ace3c110851bed53331bc6406e9f # v2.0.1
        with:
          sha: ${{ needs.init.outputs.head_sha }}
          token: ${{ secrets.GITHUB_TOKEN }}
          status: ${{ needs.run.outputs.ADHOC_STATUS }}
          targetUrl: ${{ needs.run.outputs.ADHOC_URL }}
          description: ${{ needs.run.outputs.ADHOC_OUTPUT }}
          context: 'Dev federation deploy'
