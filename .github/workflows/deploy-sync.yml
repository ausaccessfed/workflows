name: Build Docker Image
on:
  workflow_call:
    inputs:
      ecr_repository:
        required: true
        type: string
      dev_url:
        default: ""
        type: string
      event_name:
        required: true
        type: string
      event_comment_body:
        default: ""
        type: string
      default_branch:
        default: "master"
        type: string
      ## if not set defaults to default_branch
      default_branch_for_caching:
        default: ""
        type: string
      ## if not set defaults to default_branch
      default_develop_branch:
        default: ""
        type: string
      version_command:
        default: "cat .ruby-version"
        type: string
      ## if not set defaults to ecr_repository
      projects:
        default: ""
        type: string
      ## if not set will use docker build, if set will use buildx
      platforms:
        default: ""
        type: string
      runner:
        default: "ubuntu-latest"
        type: string
      production_build_task_1_name:
        default: "N/A"
        type: string
      production_build_task_1:
        default: ""
        type: string
      production_build_task_2_name:
        default: "N/A"
        type: string
      production_build_task_2:
        default: ""
        type: string
      production_build_task_3_name:
        default: "N/A"
        type: string
      production_build_task_3:
        default: ""
        type: string
      extra_task_1_name:
        default: "N/A"
        type: string
      extra_task_1:
        default: ""
        type: string
      extra_task_2_name:
        default: "N/A"
        type: string
      extra_task_2:
        default: ""
        type: string
      extra_task_3_name:
        default: "N/A"
        type: string
      extra_task_3:
        default: ""
        type: string
      production_environments:
        required: true
        type: string
    secrets:
      DOCKER_ECR:
        required: true
      ROLE:
        required: true
jobs:
  run:
    runs-on: ${{ inputs.runner }}
    name: run
    if: inputs.event_name != 'issue_comment' || (contains(inputs.event_comment_body, '/deploy')  && contains('phyzical,ArthurZheng,ritchiey,matthew-puku,rianniello,Kfoster14,waldofouche,Bo', github.event.author.login))
    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: password
        ports:
          - "3306:3306"
    steps:
      - uses: xt0rted/pull-request-comment-branch@v1
        if: inputs.event_name == 'issue_comment'
        id: comment-branch

      - name: Set commit status as pending
        uses: myrotvorets/set-commit-status-action@master
        if: inputs.event_name == 'issue_comment'
        with:
          sha: ${{ steps.comment-branch.outputs.head_sha }}
          token: ${{ secrets.GITHUB_TOKEN }}
          status: pending
          description: "testing, building and pushing image"
          context: "Dev federation deploy"

      - id: env1
        name: set envs
        run: |
          ## PR comment branch || pr branch || default branch
          if [ "${{ steps.comment-branch.outputs.head_ref }}" != "" ]; then
            branch_name="${{ steps.comment-branch.outputs.head_ref }}"
          elif [ "${{ github.head_ref }}" != "" ]; then
            branch_name="${{ github.head_ref }}"
          else
            branch_name="${{ github.ref_name }}"
          fi
          echo "BRANCH_NAME=$branch_name" >> $GITHUB_OUTPUT

          if [ "${{ inputs.event_name }}" == "issue_comment" ]; then
            image_tag=adhoc-${{steps.comment-branch.outputs.head_ref}}-${{steps.comment-branch.outputs.head_sha}}
          else
            image_tag=stable-${{ github.sha }}
          fi
          image_tag=$(echo "$image_tag" | tr / _)
          echo "IMAGE_TAG=$image_tag" >> $GITHUB_OUTPUT

      - uses: actions/checkout@v2
        with:
          ref: ${{ steps.env1.outputs.BRANCH_NAME }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@master
        with:
          aws-region: ap-southeast-2
          role-to-assume: ${{ secrets.ROLE }}
          role-session-name: GithubActions-${{ inputs.ecr_repository }}-ci

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: set more envs
        id: env2
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          VERSION=$(${{ inputs.version_command }})
          BASE_IMAGE="${{ secrets.DOCKER_ECR }}ruby-base:${VERSION}"
          echo "BASE_IMAGE=$BASE_IMAGE" >> $GITHUB_OUTPUT
          # Strip git ref prefix from version
          IMAGE_ID=$(echo "$ECR_REGISTRY/${{ inputs.ecr_repository }}" | tr '[A-Z]' '[a-z]')
          echo "ECR_REGISTRY=$ECR_REGISTRY" >> $GITHUB_OUTPUT
          echo "IMAGE_ID=$IMAGE_ID" >> $GITHUB_OUTPUT
          PROJECTS="${{ inputs.ecr_repository }}"
          if [ "${{ inputs.projects }}" != "" ]; then
            PROJECTS="${{ inputs.projects }}"
          fi
          echo "PROJECTS=$PROJECTS" >> $GITHUB_OUTPUT
          DEFAULT_BRANCH_FOR_CACHING="${{ inputs.default_branch_for_caching }}"
          if [ "$DEFAULT_BRANCH_FOR_CACHING" == "" ]; then
            DEFAULT_BRANCH_FOR_CACHING="${{ inputs.default_branch }}"
          fi
          echo "DEFAULT_BRANCH_FOR_CACHING=$DEFAULT_BRANCH_FOR_CACHING" >> $GITHUB_OUTPUT
          USE_BUILDX="false"
          if [ "${{ inputs.platforms }}" != "" ]; then
            USE_BUILDX="true"
          fi
          echo "USE_BUILDX=$USE_BUILDX" >> $GITHUB_OUTPUT

      - name: Set up QEMU
        if: ${{ steps.env2.outputs.USE_BUILDX }} == 'true'
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        if: ${{ steps.env2.outputs.USE_BUILDX }} == 'true'
        uses: docker/setup-buildx-action@v1

      - name: Build Test OCI Image
        id: build-test
        run: |
          BUILD_TEST_COMMAND=""
          COMMON="--target development --build-arg BUILDKIT_INLINE_CACHE=1 --build-arg BASE_IMAGE=${{ steps.env2.outputs.BASE_IMAGE }}  --cache-from ${{ steps.env2.outputs.IMAGE_ID }}:cache "

          if [ "${{ steps.env2.outputs.USE_BUILDX }}" == "true" ]; then
            BUILD_TEST_COMMAND="docker buildx build --platform=${{ inputs.platforms }} $COMMON -t ${{ steps.env2.outputs.IMAGE_ID }}:cache -t app:cache ."
          else
            docker pull ${{ steps.env2.outputs.IMAGE_ID }}:cache || echo "true"
            BUILD_TEST_COMMAND="DOCKER_BUILDKIT=1 docker build $COMMON -t ${{ steps.env2.outputs.IMAGE_ID }}:cache -t app:cache ."
          fi

          BUILDX_PUSH_TEST_COMMAND="docker buildx build --push --platform=${{ inputs.platforms }} $COMMON -t ${{ steps.env2.outputs.IMAGE_ID }}:cache ."
          echo "BUILDX_PUSH_TEST_COMMAND=$BUILDX_PUSH_TEST_COMMAND" >> $GITHUB_OUTPUT

          ## Note this is only needed as buildx doesnt support --load with multiple platforms yet but is on roadmap
          ## if it is ever supported simply remove this and the "Load test oci image step" and add --load to the first BUILD_TEST_COMMAND
          BUILDX_LOAD_TEST_COMMAND="docker buildx build --load $COMMON -t app:cache ."
          echo "BUILDX_LOAD_TEST_COMMAND=$BUILDX_LOAD_TEST_COMMAND" >> $GITHUB_OUTPUT

          $BUILD_TEST_COMMAND

      - name: Load Test OCI Image
        if: ${{ steps.env2.outputs.USE_BUILDX }} == 'true'
        id: load-test
        run: $(${{ steps.build-test.outputs.BUILDX_LOAD_TEST_COMMAND }})

      - name: Task ${{ inputs.extra_task_1_name }}
        if: inputs.extra_task_1 != ''
        id: extra-task-1
        run: |
          ${{ inputs.extra_task_1 }}

      - name: Task ${{ inputs.extra_task_2_name }}
        if: inputs.extra_task_2 != ''
        id: extra-task-2
        run: |
          ${{ inputs.extra_task_2 }}

      - name: Task ${{ inputs.extra_task_3_name }}
        if: inputs.extra_task_3 != ''
        id: extra-task-3
        run: |
          ${{ inputs.extra_task_3 }}

      - name: Build Production OCI Image
        id: build-production
        run: |
          BUILD_PRODUCTION_COMMAND=""
          COMMON="--target production --build-arg BUILDKIT_INLINE_CACHE=1 --build-arg RELEASE_VERSION=${{ steps.env1.outputs.IMAGE_TAG }} --build-arg BASE_IMAGE=${{ steps.env2.outputs.BASE_IMAGE }}  --cache-from ${{ steps.env2.outputs.IMAGE_ID }}:cache -t ${{ steps.env2.outputs.IMAGE_ID }}:${{ steps.env1.outputs.IMAGE_TAG }} ."
          if [ "${{ steps.env2.outputs.USE_BUILDX }}" == "true" ]; then
            BUILD_PRODUCTION_COMMAND="docker buildx build --platform=${{ inputs.platforms }} $COMMON"
          else
            BUILD_PRODUCTION_COMMAND="DOCKER_BUILDKIT=1 docker build $COMMON"
          fi

          BUILDX_PUSH_PRODUCTION_COMMAND="docker buildx build --push --platform=${{ inputs.platforms }} $COMMON"
          echo "BUILDX_PUSH_PRODUCTION_COMMAND=$BUILDX_PUSH_PRODUCTION_COMMAND" >> $GITHUB_OUTPUT

          $BUILD_PRODUCTION_COMMAND

      - name: Task ${{ inputs.production_build_task_1_name }}
        if: inputs.production_build_task_1 != ''
        id: production-extra-task-1
        run: |
          ${{ inputs.production_build_task_1 }}

      - name: Task ${{ inputs.production_build_task_2_name }}
        if: inputs.production_build_task_2 != ''
        id: production-extra-task-2
        run: |
          ${{ inputs.production_build_task_2 }}

      - name: Task ${{ inputs.production_build_task_3_name }}
        if: inputs.production_build_task_3 != ''
        id: production-extra-task-3
        run: |
          ${{ inputs.production_build_task_3 }}

      - name: Push to ECR
        if: (inputs.event_name == 'push' && steps.env1.outputs.BRANCH_NAME == inputs.default_branch) ||  inputs.event_name == 'issue_comment' || (steps.env1.outputs.BRANCH_NAME == inputs.default_develop_branch &&  inputs.event_name == 'push')
        run: |
          if [ "${{ steps.env2.outputs.USE_BUILDX }}" == "true" ]; then
            $(${{ steps.build-test.outputs.BUILDX_PUSH_PRODUCTION_COMMAND }})
          else 
            docker push ${{ steps.env2.outputs.IMAGE_ID }}:cache
          fi

      - name: Push cache to ECR
        if: (inputs.event_name == 'push' && steps.env1.outputs.BRANCH_NAME == steps.env2.outputs.DEFAULT_BRANCH_FOR_CACHING)
        run: |
          if [ "${{ steps.env2.outputs.USE_BUILDX }}" == "true" ]; then
            $(${{ steps.build-test.outputs.BUILDX_PUSH_TEST_COMMAND }})
          else
            docker push ${{ steps.env2.outputs.IMAGE_ID }}:cache
          fi

      - name: Update GitOps Repo to trigger deploys
        if: steps.env1.outputs.BRANCH_NAME == inputs.default_branch &&  inputs.event_name == 'push'
        run: |
          printenv > .envs
           docker run --env-file .envs \
           -e PROJECTS="${{ steps.env2.outputs.PROJECTS }}" \
           -e IMAGE_TAG=${{ steps.env1.outputs.IMAGE_TAG }} \
           -e ENVIRONMENTS="${{ inputs.production_environments }}" \
           -e ECR_REPOSITORY="${{ inputs.ecr_repository }}" \
           ${{ steps.env2.outputs.ECR_REGISTRY }}/publish_app:latest

      - name: Update GitOps Repo to trigger deploys for development
        if: inputs.event_name == 'issue_comment' || (steps.env1.outputs.BRANCH_NAME == inputs.default_develop_branch &&  inputs.event_name == 'push')
        run: |
          printenv > .envs
           docker run --env-file .envs \
           -e PROJECTS="${{ steps.env2.outputs.PROJECTS }}" \
           -e IMAGE_TAG=${{ steps.env1.outputs.IMAGE_TAG }} \
           -e ENVIRONMENTS="development" \
           -e ECR_REPOSITORY="${{ inputs.ecr_repository }}" \
           ${{ steps.env2.outputs.ECR_REGISTRY }}/publish_app:latest

      - name: check for failures
        id: failure-check
        if: inputs.event_name == 'issue_comment' && always()
        run: |
          output=
          status="failure"
          url="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

          if [ "${{ steps.build-test.outcome }}" != "true" ]; then 
            output="${output}Building the Test image has failed!"
          fi

          if [ "${{ steps.extra-task-1.outcome }}" != "true" ]; then 
            output="${output}${{ inputs.extra_task_1_name }} failed!"
          fi

          if [ "${{ steps.extra-task-2.outcome }}" != "true" ]; then 
            output="${output}${{ inputs.extra_task_2_name }} failed!"
          fi

          if [ "${{ steps.extra-task-3.outcome }}" != "true" ]; then 
            output="${output}${{ inputs.extra_task_3_name }} failed!"
          fi

          if [ "${{ steps.build-test.outcome }}" != "true" ]; then 
            output="${output}Building the Production image has failed!"
          fi

          if [ "${{ steps.production-extra-task-1.outcome }}" != "true" ]; then 
            output="${output}${{ inputs.production_extra_task_1_name }} failed!"
          fi

          if [ "${{ steps.production-extra-task-2.outcome }}" != "true" ]; then 
            output="${output}${{ inputs.production_extra_task_2_name }} failed!"
          fi

          if [ "${{ steps.production-extra-task-3.outcome }}" != "true" ]; then 
            output="${output}${{ inputs.production_extra_task_3_name }} failed!"
          fi

          if [ "$output" == "" ]; then 
            output="Manifest updated, Deploying to ${{ inputs.dev_url }} (may take up to 5 minutes)"
            status="success"
            url="${{ inputs.dev_url }}"
          fi
          echo "ADHOC_OUTPUT=$output" >> $GITHUB_OUTPUT
          echo "ADHOC_STATUS=$status" >> $GITHUB_OUTPUT
          echo "ADHOC_URL=$url" >> $GITHUB_OUTPUT

      - name: Set final commit status
        if: inputs.event_name == 'issue_comment' && always()
        uses: myrotvorets/set-commit-status-action@master
        with:
          sha: ${{ steps.comment-branch.outputs.head_sha }}
          token: ${{ secrets.GITHUB_TOKEN }}
          status: ${{ steps.failure-check.outputs.ADHOC_STATUS }}
          targetUrl: ${{ steps.failure-check.outputs.ADHOC_URL }}
          description: ${{ steps.failure-check.outputs.ADHOC_OUTPUT }}
          context: "Dev federation deploy"
