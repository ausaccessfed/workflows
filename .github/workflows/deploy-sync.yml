name: Build Docker Image
on:
  workflow_call:
    inputs:
      ecr_repository:
        required: true
        type: string
      base_image_repository:
        default: 'ruby-base'
        type: string
      dev_url:
        default: ''
        type: string
      event_name:
        required: true
        type: string
      event_comment_body:
        default: ''
        type: string
      event_comment_id:
        default: ''
        type: string
      default_branch:
        default: 'master'
        type: string
      ## if not set defaults to default_branch
      default_branch_for_caching:
        default: ''
        type: string
      ## if not set defaults to default_branch
      default_develop_branch:
        default: ''
        type: string
      version_command:
        default: 'cat .ruby-version'
        type: string
      ## used to allow for custom "latest" tags i.e ruby-base so we can tag with 3.2.2 or 3.3
      latest_image_tag:
        default: 'latest'
        type: string
      ## If set to '' then service will not be started
      mysql_image_tag_version:
        default: '8'
        type: string
      ## if not set defaults to ecr_repository
      projects:
        default: ''
        type: string
      platforms:
        default: "['linux/amd64']"
        type: string
      runner_cores:
        description: 'Provide the amount of cores wanted, if the powerful runner is requested, defaults to 8'
        default: '8'
        type: string
      use_better_runner_for_builds:
        description: 'if true, powerful runner will be used for build docker images'
        default: false
        type: boolean
      development_environments:
        default: 'development'
        type: string
      test_environments:
        default: ''
        type: string
      production_environments:
        default: 'test,production'
        type: string
      save_test_artifacts:
        default: false
        type: boolean
      commands:
        default: '["skip"]'
        description: 'An array of commands to be run agaisnt the development layer of the docker image'
        type: string
      production_commands:
        default: '["skip"]'
        description: 'An array of commands to be run agaisnt the production layer of the docker image'
        type: string
      workflow_id:
        description: 'This is an id that is used for things like artifacts, needed when being called in a matrix'
        default: ''
        type: string
    secrets:
      ROLE:
        required: true
      SNYK_TOKEN:
        required: true
jobs:
  init:
    outputs:
      HEAD_SHA: ${{ steps.comment-branch.outputs.HEAD_SHA }}
      IS_SLASH_DEPLOY: ${{ steps.env.outputs.IS_SLASH_DEPLOY }}
      PUBLISH_APP_IMAGE_ID_TAG: ${{ steps.env.outputs.PUBLISH_APP_IMAGE_ID_TAG }}
      IMAGE_TAG: ${{ steps.env.outputs.IMAGE_TAG }}
      PROJECTS: ${{ steps.env.outputs.PROJECTS }}
      IS_DEFAULT_DEVELOPMENT_BRANCH_PUSH: ${{ steps.env.outputs.IS_DEFAULT_DEVELOPMENT_BRANCH_PUSH }}
      IS_MONTHLY_BUILD: ${{ steps.env.outputs.IS_MONTHLY_BUILD }}
      IS_DEFAULT_BRANCH_PUSH: ${{ steps.env.outputs.IS_DEFAULT_BRANCH_PUSH }}
      BRANCH_NAME: ${{ steps.branch.outputs.BRANCH_NAME }}
      IMAGE_VERSION: ${{ steps.env.outputs.IMAGE_VERSION }}
      BASE_IMAGE: ${{ steps.env.outputs.BASE_IMAGE }}
      ECR_IMAGE_ID_TAG: ${{ steps.env.outputs.ECR_IMAGE_ID_TAG }}
      ECR_IMAGE_TAG: ${{ steps.env.outputs.ECR_IMAGE_TAG }}
      LATEST_IMAGE_ID_TAG: ${{ steps.env.outputs.LATEST_IMAGE_ID_TAG }}
      SHOULD_PUSH_IMAGE_TO_ECR: ${{ steps.env.outputs.SHOULD_PUSH_IMAGE_TO_ECR }}
      GITHUB_REGISTRY_REF: ${{ steps.env.outputs.GITHUB_REGISTRY_REF }}
      GITHUB_TEST_IMAGE_ID_TAG: ${{ steps.env.outputs.GITHUB_TEST_IMAGE_ID_TAG }}
      GITHUB_LATEST_IMAGE_ID_TAG: ${{ steps.env.outputs.GITHUB_LATEST_IMAGE_ID_TAG }}
      GITHUB_BRANCH_TEST_IMAGE_ID_TAG: ${{ steps.env.outputs.GITHUB_BRANCH_TEST_IMAGE_ID_TAG }}
      GITHUB_BRANCH_LATEST_IMAGE_ID_TAG: ${{ steps.env.outputs.GITHUB_BRANCH_LATEST_IMAGE_ID_TAG }}
      IMAGE_ID: ${{ steps.env.outputs.IMAGE_ID }}
      INTEL_RUNNER: ${{ steps.env.outputs.INTEL_RUNNER }}
      ARM_RUNNER: ${{ steps.env.outputs.ARM_RUNNER }}
      INTEL_RUNNER_CHEAP: ${{ steps.env.outputs.INTEL_RUNNER_CHEAP }}
      ARM_RUNNER_CHEAP: ${{ steps.env.outputs.ARM_RUNNER_CHEAP }}
    name: init
    runs-on: ubuntu-latest
    if: inputs.event_name != 'issue_comment' || (contains(inputs.event_comment_body, '/deploy') && contains(fromJSON(vars.ALLOWED_ACTORS), github.event.comment.user.login))
    steps:
      - uses: xt0rted/pull-request-comment-branch@d97294d304604fa98a2600a6e2f916a84b596dc7 # v2.0.0
        if: inputs.event_name == 'issue_comment'
        id: comment-branch

      - name: Set commit status as pending
        uses: myrotvorets/set-commit-status-action@3730c0a348a2ace3c110851bed53331bc6406e9f # v2.0.1
        if: inputs.event_name == 'issue_comment'
        with:
          sha: ${{ steps.comment-branch.outputs.HEAD_SHA }}
          token: ${{ secrets.GITHUB_TOKEN }}
          status: pending
          description: 'testing, building and pushing image'
          context: 'Dev federation deploy'

      - id: branch
        name: set envs
        run: |
          ## PR comment branch || pr branch || default branch
          if [ "${{ steps.comment-branch.outputs.head_ref }}" != "" ]; then
            BRANCH_NAME="${{ steps.comment-branch.outputs.head_ref }}"
          elif [ "${{ github.head_ref }}" != "" ]; then
            BRANCH_NAME="${{ github.head_ref }}"
          else
            BRANCH_NAME="${{ github.ref_name }}"
          fi
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_OUTPUT

      - uses: ausaccessfed/workflows/.github/actions/validate-gpg-key@main
        if: inputs.event_name == 'issue_comment'
        with:
          BRANCH_NAME: ${{ steps.branch.outputs.BRANCH_NAME }}
        id: validate_issue_comment

      - uses: ausaccessfed/workflows/.github/actions/init@main
        with:
          BRANCH_NAME: ${{ steps.branch.outputs.BRANCH_NAME }}
          ROLE: ${{ secrets.ROLE }}
          ECR_REPOSITORY: ${{ inputs.ecr_repository }}

      - name: set more envs
        id: env
        run: |
          IS_SLASH_DEPLOY=$(([ "${{ inputs.event_name }}" == "issue_comment" ] && [ "${{contains(inputs.event_comment_body, '/deploy')}}" == "true" ] && echo "true") || echo "false")
          echo "IS_SLASH_DEPLOY=$IS_SLASH_DEPLOY" >> $GITHUB_OUTPUT

          IS_MONTHLY_BUILD=$([ "${{ inputs.event_name }}" == "schedule" ] && echo "true" || echo "false")
          echo "IS_MONTHLY_BUILD=$IS_MONTHLY_BUILD" >> $GITHUB_OUTPUT

          IS_DEFAULT_BRANCH_PUSH=$(([ "${{ inputs.event_name }}" == "push" ] && [ "${{steps.branch.outputs.BRANCH_NAME}}" == "${{ inputs.default_branch }}" ]) && echo "true" || echo "false")
          echo "IS_DEFAULT_BRANCH_PUSH=$IS_DEFAULT_BRANCH_PUSH" >> $GITHUB_OUTPUT

          IS_DEFAULT_DEVELOPMENT_BRANCH_PUSH=$(([ "${{ inputs.event_name }}" == "push" ] && [ "${{steps.branch.outputs.BRANCH_NAME}}" == "${{ inputs.default_develop_branch }}" ]) && echo "true" || echo "false")
          echo "IS_DEFAULT_DEVELOPMENT_BRANCH_PUSH=$IS_DEFAULT_DEVELOPMENT_BRANCH_PUSH" >> $GITHUB_OUTPUT

          if [ "$IS_SLASH_DEPLOY" == "true" ]; then
            IMAGE_TAG="adhoc-${{steps.comment-branch.outputs.head_ref}}"
          else
            if [ "$IS_DEFAULT_BRANCH_PUSH" == "true" ] || [ "$IS_MONTHLY_BUILD" == "true" ]; then
              IMAGE_TAG="stable-${{ github.sha }}"
             else
              IMAGE_TAG="${{ steps.branch.outputs.BRANCH_NAME }}"
            fi
          fi
          IMAGE_TAG=$(echo "$IMAGE_TAG" | tr / _)
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_OUTPUT

          SHOULD_PUSH_IMAGE_TO_ECR=$([ \
            "$IS_DEFAULT_BRANCH_PUSH" == "true" \
            -o \
            "$IS_SLASH_DEPLOY" == "true" \
            -o \
            "$IS_DEFAULT_DEVELOPMENT_BRANCH_PUSH" == "true" \
            -o \
            "$IS_MONTHLY_BUILD" == "true" \
          ] && echo "true" || echo "false")
          echo "SHOULD_PUSH_IMAGE_TO_ECR=$SHOULD_PUSH_IMAGE_TO_ECR" >> $GITHUB_OUTPUT

          DOCKER_ECR=$(aws secretsmanager get-secret-value --secret-id "aaf-terraform-DOCKER_ECR" --query 'SecretString' --output text | sed 's:/*$::')

          GITHUB_REGISTRY_ROOT_REF="ghcr.io/ausaccessfed"
          GITHUB_REGISTRY_REF="$GITHUB_REGISTRY_ROOT_REF/${{ inputs.ecr_repository }}"
          echo "GITHUB_REGISTRY_REF=$GITHUB_REGISTRY_REF" >> $GITHUB_OUTPUT

          echo "PUBLISH_APP_IMAGE_ID_TAG=$GITHUB_REGISTRY_ROOT_REF/publish_app:latest" >> $GITHUB_OUTPUT

          IMAGE_VERSION=$(${{ inputs.version_command }})
          echo "IMAGE_VERSION=$IMAGE_VERSION" >> $GITHUB_OUTPUT
          BASE_IMAGE="$GITHUB_REGISTRY_ROOT_REF/${{ inputs.base_image_repository }}:${IMAGE_VERSION}"
          echo "BASE_IMAGE=$BASE_IMAGE" >> $GITHUB_OUTPUT

          # Strip git ref prefix from version
          IMAGE_ID=$(echo "$DOCKER_ECR/${{ inputs.ecr_repository }}" | tr '[A-Z]' '[a-z]')

          echo "IMAGE_ID=$IMAGE_ID" >> $GITHUB_OUTPUT

          ECR_IMAGE_TAG="$IMAGE_TAG"
          if [ "$IS_SLASH_DEPLOY" == "true" ]; then
            ECR_IMAGE_TAG="$ECR_IMAGE_TAG-${{steps.comment-branch.outputs.HEAD_SHA}}"
          fi

          echo "ECR_IMAGE_TAG=$ECR_IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "ECR_IMAGE_ID_TAG=$IMAGE_ID:$ECR_IMAGE_TAG" >> $GITHUB_OUTPUT

          echo "LATEST_IMAGE_ID_TAG=$IMAGE_ID:${{ inputs.latest_image_tag }}" >> $GITHUB_OUTPUT

          if [ "${{ inputs.workflow_id }}" != "" ]; then
            WORKFLOW_ID="-${{ inputs.workflow_id }}"
          fi

          GITHUB_TEST_IMAGE_ID_TAG="$GITHUB_REGISTRY_REF:test$WORKFLOW_ID"
          echo "GITHUB_TEST_IMAGE_ID_TAG=$GITHUB_TEST_IMAGE_ID_TAG" >> $GITHUB_OUTPUT

          GITHUB_BRANCH_TEST_IMAGE_ID_TAG="$GITHUB_TEST_IMAGE_ID_TAG"

          if [ "$IS_DEFAULT_BRANCH_PUSH" != "true" ]; then
            GITHUB_BRANCH_TEST_IMAGE_ID_TAG="$GITHUB_TEST_IMAGE_ID_TAG-$IMAGE_TAG"
          fi

          echo "GITHUB_BRANCH_TEST_IMAGE_ID_TAG=$GITHUB_BRANCH_TEST_IMAGE_ID_TAG" >> $GITHUB_OUTPUT

          GITHUB_LATEST_IMAGE_ID_TAG="$GITHUB_REGISTRY_REF:${{ inputs.latest_image_tag }}"
          echo "GITHUB_LATEST_IMAGE_ID_TAG=$GITHUB_LATEST_IMAGE_ID_TAG" >> $GITHUB_OUTPUT

          GITHUB_BRANCH_LATEST_IMAGE_ID_TAG="$GITHUB_LATEST_IMAGE_ID_TAG$WORKFLOW_ID"

          if [ "$IS_DEFAULT_BRANCH_PUSH" != "true" ]; then
            GITHUB_BRANCH_LATEST_IMAGE_ID_TAG="$GITHUB_LATEST_IMAGE_ID_TAG-$IMAGE_TAG"
          fi

          echo "GITHUB_BRANCH_LATEST_IMAGE_ID_TAG=$GITHUB_BRANCH_LATEST_IMAGE_ID_TAG" >> $GITHUB_OUTPUT

          PROJECTS="${{ inputs.ecr_repository }}"
          if [ "${{ inputs.projects }}" != "" ]; then
            PROJECTS="${{ inputs.projects }}"
          fi
          echo "PROJECTS=$PROJECTS" >> $GITHUB_OUTPUT

          # Note this assumes runners exist given the naming ARCH-NUM_CORES-cores
          # TODO: make this work for more than intel and arm? maybe we dont need anything else
          INTEL_RUNNER=amd64-${{inputs.runner_cores}}-cores
          if [ "${{inputs.runner_cores}}" == "2" ]; then
            INTEL_RUNNER=ubuntu-latest
          fi
          echo "INTEL_RUNNER=$INTEL_RUNNER" >> $GITHUB_OUTPUT
          echo "INTEL_RUNNER_CHEAP=ubuntu-latest" >> $GITHUB_OUTPUT
          echo "ARM_RUNNER=arm64-${{inputs.runner_cores}}-cores" >> $GITHUB_OUTPUT
          echo "ARM_RUNNER_CHEAP=arm64-2-cores" >> $GITHUB_OUTPUT

  build-test:
    needs: [init]
    strategy:
      matrix:
        arch: ${{ fromJSON(inputs.platforms) }}
    runs-on: ${{ (matrix.arch == 'linux/amd64' && ((inputs.use_better_runner_for_builds && needs.init.outputs.INTEL_RUNNER) || needs.init.outputs.INTEL_RUNNER_CHEAP)) || ((inputs.use_better_runner_for_builds && needs.init.outputs.ARM_RUNNER) || needs.init.outputs.ARM_RUNNER_CHEAP) }}
    name: Build Test Image
    steps:
      - uses: ausaccessfed/workflows/.github/actions/build@main
        with:
          BRANCH_NAME: ${{ needs.init.outputs.BRANCH_NAME }}
          ECR_REPOSITORY: ${{ inputs.ecr_repository }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_ACTOR: ${{ github.actor }}
          IMAGE_PLATFORM: ${{ matrix.arch }}
          IMAGE_BUILD_ARGS: |
            RUBY_VERSION=${{ needs.init.outputs.IMAGE_VERSION }}
            BASE_IMAGE=${{ needs.init.outputs.BASE_IMAGE }}
          IMAGE_TARGET: development
          IMAGE_CACHE_TO: ${{ needs.init.outputs.GITHUB_BRANCH_TEST_IMAGE_ID_TAG }}
          IMAGE_CACHE_FROM: ${{ needs.init.outputs.GITHUB_TEST_IMAGE_ID_TAG }}~${{ needs.init.outputs.GITHUB_BRANCH_TEST_IMAGE_ID_TAG }}
          IMAGE_TAGS: ${{ needs.init.outputs.GITHUB_BRANCH_TEST_IMAGE_ID_TAG }}
          IMAGE_LOAD: false
          IMAGE_PUSH: true
          IMAGE_FORCE_REBUILD: inputs.event_name == 'schedule'
          JOB_INDEX: ${{ strategy.job-index }}
          JOB_ID: ${{inputs.workflow_id}}-test

  post-build-test:
    needs: [init, build-test]
    runs-on: ${{needs.init.outputs.INTEL_RUNNER_CHEAP}}
    steps:
      - uses: ausaccessfed/workflows/.github/actions/publish_manifest@main
        with:
          BRANCH_NAME: ${{ needs.init.outputs.BRANCH_NAME }}
          ECR_REPOSITORY: ${{ inputs.ecr_repository }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_ACTOR: ${{ github.actor }}
          IMAGE_TAGS: ${{ needs.init.outputs.GITHUB_BRANCH_TEST_IMAGE_ID_TAG }}
          IMAGE_TAG_SOURCE: ${{ needs.init.outputs.GITHUB_BRANCH_TEST_IMAGE_ID_TAG }}
          JOB_ID: ${{inputs.workflow_id}}-test

  build-production:
    needs: [init, post-build-test]
    strategy:
      matrix:
        arch: ${{ fromJSON(inputs.platforms) }}
    runs-on: ${{ (matrix.arch == 'linux/amd64' && ((inputs.use_better_runner_for_builds && needs.init.outputs.INTEL_RUNNER) || needs.init.outputs.INTEL_RUNNER_CHEAP)) || ((inputs.use_better_runner_for_builds && needs.init.outputs.ARM_RUNNER) || needs.init.outputs.ARM_RUNNER_CHEAP) }}
    name: Build Production Image
    steps:
      - uses: ausaccessfed/workflows/.github/actions/build@main
        with:
          BRANCH_NAME: ${{ needs.init.outputs.BRANCH_NAME }}
          ECR_REPOSITORY: ${{ inputs.ecr_repository }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_ACTOR: ${{ github.actor }}
          IMAGE_PLATFORM: ${{ matrix.arch }}
          IMAGE_BUILD_ARGS: |
            RUBY_VERSION=${{ needs.init.outputs.IMAGE_VERSION }}
            BASE_IMAGE=${{ needs.init.outputs.BASE_IMAGE }}
            RELEASE_VERSION=${{ needs.init.outputs.IMAGE_TAG }}
          IMAGE_TARGET: production
          IMAGE_CACHE_TO: ${{ needs.init.outputs.GITHUB_BRANCH_LATEST_IMAGE_ID_TAG }}
          IMAGE_CACHE_FROM: ${{ needs.init.outputs.GITHUB_BRANCH_TEST_IMAGE_ID_TAG }}~${{ needs.init.outputs.GITHUB_BRANCH_LATEST_IMAGE_ID_TAG }}
          IMAGE_TAGS: ${{ needs.init.outputs.GITHUB_BRANCH_LATEST_IMAGE_ID_TAG }}
          IMAGE_LOAD: false
          IMAGE_PUSH: true
          JOB_INDEX: ${{ strategy.job-index }}
          JOB_ID: ${{inputs.workflow_id}}-production

  post-build-production:
    needs: [init, build-production]
    runs-on: ${{needs.init.outputs.INTEL_RUNNER_CHEAP}}
    steps:
      - uses: ausaccessfed/workflows/.github/actions/publish_manifest@main
        with:
          BRANCH_NAME: ${{ needs.init.outputs.BRANCH_NAME }}
          ECR_REPOSITORY: ${{ inputs.ecr_repository }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_ACTOR: ${{ github.actor }}
          IMAGE_TAGS: ${{ needs.init.outputs.GITHUB_BRANCH_LATEST_IMAGE_ID_TAG }}
          IMAGE_TAG_SOURCE: ${{ needs.init.outputs.GITHUB_BRANCH_LATEST_IMAGE_ID_TAG }}
          JOB_ID: ${{inputs.workflow_id}}-production

  trivy-repo-scan:
    needs: [init, post-build-test]
    strategy:
      matrix:
        arch: ${{ fromJSON(inputs.platforms) }}
    runs-on: ${{ (matrix.arch == 'linux/amd64' && needs.init.outputs.INTEL_RUNNER_CHEAP) || needs.init.outputs.ARM_RUNNER_CHEAP }}
    name: Trivy repo scan
    steps:
      - uses: ausaccessfed/workflows/.github/actions/image_scanner@main
        with:
          BRANCH_NAME: ${{ needs.init.outputs.BRANCH_NAME }}
          SCAN_NAME: trivy_repo
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_ACTOR: ${{ github.actor }}
          SUPPRESS_FAILURE: true

  test-image-commands:
    needs: [init, post-build-test]
    strategy:
      matrix:
        arch: ${{ (inputs.commands != '["skip"]' && needs.init.outputs.IS_SLASH_DEPLOY == 'false' &&  fromJSON(inputs.platforms)) || fromJSON('["linux/amd64"]') }}
        command: ${{ needs.init.outputs.IS_SLASH_DEPLOY == 'true' && fromJSON('["skip"]') || fromJSON(inputs.commands) }}
    runs-on: ${{ (matrix.arch == 'linux/amd64' && ((contains(matrix.command, 'BETTER_RUNNER') && needs.init.outputs.INTEL_RUNNER) || needs.init.outputs.INTEL_RUNNER_CHEAP)) || ((contains(matrix.command, 'BETTER_RUNNER') && needs.init.outputs.ARM_RUNNER) || needs.init.outputs.ARM_RUNNER_CHEAP) }}
    name: ${{ format(matrix.command, '') }} (${{ matrix.arch }})
    services:
      mysql:
        image: ${{ ( inputs.mysql_image_tag_version != '' ) && format('mysql:{0}', inputs.mysql_image_tag_version) || '' }}
        env:
          MYSQL_ROOT_PASSWORD: password
        ports:
          - '3306:3306'
    steps:
      - uses: ausaccessfed/workflows/.github/actions/command_runner@main
        if: matrix.COMMAND != 'skip'
        with:
          COMMAND: ${{ matrix.command }}
          BRANCH_NAME: ${{ needs.init.outputs.BRANCH_NAME }}
          ROLE: ${{ secrets.ROLE }}
          ECR_REPOSITORY: ${{ inputs.ecr_repository }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_ACTOR: ${{ github.actor }}
          IS_DEFAULT_BRANCH_PUSH: ${{ needs.init.outputs.IS_DEFAULT_BRANCH_PUSH }}
          SAVE_ARTIFACTS: ${{inputs.save_test_artifacts && 'true' || 'false'}}
          IMAGE_ID_TAG: ${{needs.init.outputs.GITHUB_BRANCH_TEST_IMAGE_ID_TAG}}

  production-image-commands:
    needs: [init, post-build-production]
    strategy:
      matrix:
        arch: ${{ (inputs.production_commands != '["skip"]' &&  fromJSON(inputs.platforms)) || fromJSON('["linux/amd64"]') }}
        command: ${{ needs.init.outputs.IS_SLASH_DEPLOY == 'true' && fromJSON('["skip"]') || fromJSON(inputs.production_commands) }}
    runs-on: ${{ (matrix.arch == 'linux/amd64' && ((contains(matrix.command, 'BETTER_RUNNER') && needs.init.outputs.INTEL_RUNNER) || needs.init.outputs.INTEL_RUNNER_CHEAP)) || ((contains(matrix.command, 'BETTER_RUNNER') && needs.init.outputs.ARM_RUNNER) || needs.init.outputs.ARM_RUNNER_CHEAP) }}
    name: ${{ format(matrix.command, '') }} (${{ matrix.arch }})
    steps:
      - uses: ausaccessfed/workflows/.github/actions/command_runner@main
        if: matrix.COMMAND != 'skip'
        with:
          COMMAND: ${{ matrix.command }}
          BRANCH_NAME: ${{ needs.init.outputs.BRANCH_NAME }}
          ROLE: ${{ secrets.ROLE }}
          ECR_REPOSITORY: ${{ inputs.ecr_repository }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_ACTOR: ${{ github.actor }}
          IS_DEFAULT_BRANCH_PUSH: ${{ needs.init.outputs.IS_DEFAULT_BRANCH_PUSH }}
          SAVE_ARTIFACTS: ${{inputs.save_test_artifacts && 'true' || 'false'}}
          IMAGE_ID_TAG: ${{needs.init.outputs.GITHUB_BRANCH_LATEST_IMAGE_ID_TAG}}

  dockle-lint:
    needs: [init, post-build-production]
    strategy:
      matrix:
        arch: ${{ fromJSON(inputs.platforms) }}
    runs-on: ${{ (matrix.arch == 'linux/amd64' && needs.init.outputs.INTEL_RUNNER_CHEAP) || needs.init.outputs.ARM_RUNNER_CHEAP }}
    env:
      DOCKLE_HOST: 'unix:///var/run/docker.sock'
    name: Dockle
    steps:
      - uses: ausaccessfed/workflows/.github/actions/image_scanner@main
        with:
          BRANCH_NAME: ${{ needs.init.outputs.BRANCH_NAME }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_ACTOR: ${{ github.actor }}
          IMAGE_TAG_FOR_SCAN: ${{ needs.init.outputs.GITHUB_BRANCH_LATEST_IMAGE_ID_TAG }}
          SCAN_NAME: dockle

  hadolint:
    needs: [init, post-build-production]
    strategy:
      matrix:
        arch: ${{ fromJSON(inputs.platforms) }}
    runs-on: ${{ (matrix.arch == 'linux/amd64' && needs.init.outputs.INTEL_RUNNER_CHEAP) || needs.init.outputs.ARM_RUNNER_CHEAP }}
    name: Hadolint
    steps:
      - uses: ausaccessfed/workflows/.github/actions/image_scanner@main
        with:
          BRANCH_NAME: ${{ needs.init.outputs.BRANCH_NAME }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_ACTOR: ${{ github.actor }}
          IMAGE_TAG_FOR_SCAN: ${{ needs.init.outputs.GITHUB_BRANCH_LATEST_IMAGE_ID_TAG }}
          SCAN_NAME: hadolint

  snyk-cve-scan:
    needs: [init, post-build-production]
    strategy:
      matrix:
        arch: ${{ fromJSON(inputs.platforms) }}
    runs-on: ${{ (matrix.arch == 'linux/amd64' && needs.init.outputs.INTEL_RUNNER_CHEAP) || needs.init.outputs.ARM_RUNNER_CHEAP }}
    name: Snyk
    steps:
      - uses: ausaccessfed/workflows/.github/actions/image_scanner@main
        with:
          BRANCH_NAME: ${{ needs.init.outputs.BRANCH_NAME }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_ACTOR: ${{ github.actor }}
          IMAGE_TAG_FOR_SCAN: ${{ needs.init.outputs.GITHUB_BRANCH_LATEST_IMAGE_ID_TAG }}
          SCAN_NAME: snyk
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
          SUPPRESS_FAILURE: true

  grype-cve-scan:
    needs: [init, post-build-production]
    strategy:
      matrix:
        arch: ${{ fromJSON(inputs.platforms) }}
    runs-on: ${{ (matrix.arch == 'linux/amd64' && needs.init.outputs.INTEL_RUNNER_CHEAP) || needs.init.outputs.ARM_RUNNER_CHEAP }}
    name: Grype
    steps:
      - uses: ausaccessfed/workflows/.github/actions/image_scanner@main
        with:
          BRANCH_NAME: ${{ needs.init.outputs.BRANCH_NAME }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_ACTOR: ${{ github.actor }}
          IMAGE_TAG_FOR_SCAN: ${{ needs.init.outputs.GITHUB_BRANCH_LATEST_IMAGE_ID_TAG }}
          SCAN_NAME: grype
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
          SUPPRESS_FAILURE: true

  trivy-cve-scan:
    needs: [init, post-build-production]
    strategy:
      matrix:
        arch: ${{ fromJSON(inputs.platforms) }}
    runs-on: ${{ (matrix.arch == 'linux/amd64' && needs.init.outputs.INTEL_RUNNER_CHEAP) || needs.init.outputs.ARM_RUNNER_CHEAP }}
    name: Trivy image scan
    steps:
      - uses: ausaccessfed/workflows/.github/actions/image_scanner@main
        with:
          BRANCH_NAME: ${{ needs.init.outputs.BRANCH_NAME }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_ACTOR: ${{ github.actor }}
          IMAGE_TAG_FOR_SCAN: ${{ needs.init.outputs.GITHUB_BRANCH_LATEST_IMAGE_ID_TAG }}
          SCAN_NAME: trivy_image
          SUPPRESS_FAILURE: true

  push-to-ecr:
    needs:
      [
        init,
        test-image-commands,
        trivy-cve-scan,
        grype-cve-scan,
        snyk-cve-scan,
        hadolint,
        dockle-lint,
        production-image-commands
      ]
    if: needs.init.outputs.SHOULD_PUSH_IMAGE_TO_ECR == 'true'
    strategy:
      matrix:
        arch: ${{ fromJSON(inputs.platforms) }}
    runs-on: ${{ (matrix.arch == 'linux/amd64' && needs.init.outputs.INTEL_RUNNER_CHEAP) || needs.init.outputs.ARM_RUNNER_CHEAP }}
    name: Pushing images to ecr
    steps:
      - uses: ausaccessfed/workflows/.github/actions/build@main
        with:
          BRANCH_NAME: ${{ needs.init.outputs.BRANCH_NAME }}
          ROLE: ${{ secrets.ROLE }}
          ECR_REPOSITORY: ${{ inputs.ecr_repository }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_ACTOR: ${{ github.actor }}
          IMAGE_PLATFORM: ${{ matrix.arch }}
          IMAGE_BUILD_ARGS: |
            RUBY_VERSION=${{ needs.init.outputs.IMAGE_VERSION }}
            BASE_IMAGE=${{ needs.init.outputs.BASE_IMAGE }}
            RELEASE_VERSION=${{ needs.init.outputs.IMAGE_TAG }}
          IMAGE_TARGET: production
          IMAGE_CACHE_FROM: ${{ needs.init.outputs.GITHUB_BRANCH_LATEST_IMAGE_ID_TAG }}
          IMAGE_TAGS: ${{ needs.init.outputs.ECR_IMAGE_ID_TAG }}
          IMAGE_LOAD: false
          IMAGE_PUSH: true
          JOB_INDEX: ${{ strategy.job-index }}
          JOB_ID: ${{inputs.workflow_id}}-push-to-ecr

  update-production-manifests:
    needs: [push-to-ecr, init]
    name: 'Update production manifests'
    runs-on: ${{needs.init.outputs.INTEL_RUNNER_CHEAP}}
    steps:
      - uses: ausaccessfed/workflows/.github/actions/publish_manifest@main
        name: Updating GHCR manifests
        with:
          BRANCH_NAME: ${{ needs.init.outputs.BRANCH_NAME }}
          ECR_REPOSITORY: ${{ inputs.ecr_repository }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_ACTOR: ${{ github.actor }}
          IMAGE_TAGS: ${{ needs.init.outputs.GITHUB_LATEST_IMAGE_ID_TAG }}
          IMAGE_TAG_SOURCE: ${{ needs.init.outputs.GITHUB_BRANCH_LATEST_IMAGE_ID_TAG }}
          JOB_ID: ${{inputs.workflow_id}}-production

      - id: env
        run: |
          ECR_LINK_TAGS="${{ needs.init.outputs.ECR_IMAGE_ID_TAG }}~${{ needs.init.outputs.LATEST_IMAGE_ID_TAG }}"
          if [ "${{needs.init.outputs.IS_SLASH_DEPLOY}}" == "true" ]; then
            ECR_LINK_TAGS="${{ needs.init.outputs.ECR_IMAGE_ID_TAG }}"
          fi
          echo "ECR_LINK_TAGS=$ECR_LINK_TAGS" >> $GITHUB_OUTPUT

      - uses: ausaccessfed/workflows/.github/actions/publish_manifest@main
        name: Updating ECR manifests
        with:
          BRANCH_NAME: ${{ needs.init.outputs.BRANCH_NAME }}
          ROLE: ${{ secrets.ROLE }}
          ECR_REPOSITORY: ${{ inputs.ecr_repository }}
          IMAGE_TAGS: ${{ steps.env.outputs.ECR_LINK_TAGS }}
          IMAGE_TAG_SOURCE: ${{  needs.init.outputs.ECR_IMAGE_ID_TAG }}
          JOB_ID: ${{inputs.workflow_id}}-push-to-ecr

  update-terraform-manifests:
    needs: [update-production-manifests, init]
    name: 'Update terraform manifests'
    runs-on: ${{needs.init.outputs.INTEL_RUNNER_CHEAP}}
    steps:
      ## no point making the gitops repo triggers async, they will fight each other
      ## and usually only 1 if statement is called anyway
      - name: Update GitOps Repo to trigger deploys
        if: inputs.production_environments != '' && (needs.init.outputs.IS_DEFAULT_BRANCH_PUSH == 'true' || needs.init.outputs.IS_MONTHLY_BUILD == 'true')
        uses: ausaccessfed/workflows/.github/actions/publish_app@main
        with:
          ROLE: ${{ secrets.ROLE }}
          ECR_REPOSITORY: ${{ inputs.ecr_repository }}
          PUBLISH_IMAGE_TAG: ${{ needs.init.outputs.ECR_IMAGE_TAG }}
          PUBLISH_APPS: ${{ needs.init.outputs.PROJECTS }}
          PUBLISH_ENVIRONMENTS: ${{ inputs.production_environments }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_ACTOR: ${{ github.actor }}

      - name: Update GitOps Repo to trigger deploys for test
        if: inputs.test_environments != '' && needs.init.outputs.IS_DEFAULT_DEVELOPMENT_BRANCH_PUSH == 'true'
        uses: ausaccessfed/workflows/.github/actions/publish_app@main
        with:
          ROLE: ${{ secrets.ROLE }}
          ECR_REPOSITORY: ${{ inputs.ecr_repository }}
          PUBLISH_IMAGE_TAG: ${{ needs.init.outputs.ECR_IMAGE_TAG }}
          PUBLISH_APPS: ${{ needs.init.outputs.PROJECTS }}
          PUBLISH_ENVIRONMENTS: ${{ inputs.test_environments }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_ACTOR: ${{ github.actor }}

      - name: Update GitOps Repo to trigger deploys for development
        if: inputs.development_environments != '' && needs.init.outputs.IS_SLASH_DEPLOY == 'true'
        uses: ausaccessfed/workflows/.github/actions/publish_app@main
        with:
          ROLE: ${{ secrets.ROLE }}
          ECR_REPOSITORY: ${{ inputs.ecr_repository }}
          PUBLISH_IMAGE_TAG: ${{ needs.init.outputs.ECR_IMAGE_TAG }}
          PUBLISH_APPS: ${{ needs.init.outputs.PROJECTS }}
          PUBLISH_ENVIRONMENTS: ${{ inputs.development_environments }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_ACTOR: ${{ github.actor }}

  update-comments:
    needs:
      [
        init,
        build-test,
        build-production,
        test-image-commands,
        production-image-commands,
        hadolint,
        dockle-lint,
        trivy-cve-scan,
        grype-cve-scan,
        snyk-cve-scan,
        push-to-ecr,
        update-production-manifests,
        update-terraform-manifests
      ]
    name: 'update-comments'
    runs-on: ${{needs.init.outputs.INTEL_RUNNER_CHEAP}}
    if: needs.init.outputs.IS_SLASH_DEPLOY == 'true' && always()
    steps:
      - name: check for failures
        id: failure-check
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          OUTPUT=
          STATUS="failure"
          URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

          if [ "${{ needs.build-test.result }}" == "failure" ]; then
            OUTPUT="${OUTPUT}Building the Test image has failed! "
          fi

          if [ "${{ needs.build-production.result }}" == "failure" ]; then
            OUTPUT="${OUTPUT}Building the Production image has failed!"
          fi

          if [ "${{ needs.test-image-commands.result }}" == "failure" ]; then
            OUTPUT="${OUTPUT}Some of the test-image-commands have failed!"
          fi

           if [ "${{ needs.production-image-commands.result }}" == "failure" ]; then
            OUTPUT="${OUTPUT}Some of the production-image-commands have failed!"
          fi

          if [ "$OUTPUT" == "" ]; then
            OUTPUT="Manifest updated, Deploying to ${{ inputs.dev_url }} (may take up to 5 minutes)"
            STATUS="success"
            URL="${{ inputs.dev_url }}"
          fi
          echo "ADHOC_OUTPUT=$OUTPUT" >> $GITHUB_OUTPUT
          echo "ADHOC_STATUS=$STATUS" >> $GITHUB_OUTPUT
          echo "ADHOC_URL=$URL" >> $GITHUB_OUTPUT
          if [ "${{ inputs.event_comment_id }}" != "" ]; then
            gh api \
              --method DELETE \
              -H "Accept: application/vnd.github+json" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              /repos/${{ github.repository }}/issues/comments/${{ inputs.event_comment_id }}
          fi

      - name: Set final commit status
        uses: myrotvorets/set-commit-status-action@3730c0a348a2ace3c110851bed53331bc6406e9f # v2.0.1
        with:
          sha: ${{ needs.init.outputs.HEAD_SHA }}
          token: ${{ secrets.GITHUB_TOKEN }}
          status: ${{ steps.failure-check.outputs.ADHOC_STATUS }}
          targetUrl: ${{ steps.failure-check.outputs.ADHOC_URL }}
          description: ${{ steps.failure-check.outputs.ADHOC_OUTPUT }}
          context: 'Dev federation deploy'

  finish:
    needs:
      [
        init,
        build-test,
        build-production,
        test-image-commands,
        production-image-commands,
        hadolint,
        dockle-lint,
        trivy-cve-scan,
        grype-cve-scan,
        snyk-cve-scan,
        trivy-repo-scan,
        push-to-ecr,
        update-production-manifests,
        update-terraform-manifests
      ]
    if: always() && needs.init.result != 'skipped'
    name: 'finish'
    runs-on: ${{needs.init.outputs.INTEL_RUNNER_CHEAP}}
    steps:
      - name: check for failures
        run: |
          STRING="${{ needs.init.result }}${{ needs.build-test.result }}${{ needs.build-production.result }}${{ needs.test-image-commands.result }}${{ needs.production-image-commands.result }}${{ needs.hadolint.result }}${{ needs.dockle-lint.result }}${{ needs.trivy-repo-scan.result }}${{ needs.trivy-cve-scan.result }}${{ needs.grype-cve-scan.result }}${{ needs.snyk-cve-scan.result }}${{ needs.push-to-ecr.result }}${{ needs.update-production-manifests.result }}${{ needs.update-terraform-manifests.result }}"
          echo "$STRING" | grep -E '^(success|skipped)+$'
